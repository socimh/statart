% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tab.R
\name{tab}
\alias{tab}
\alias{tab1}
\alias{tab2}
\alias{fre}
\alias{fre1}
\alias{fre2}
\title{Tabulate columns}
\usage{
tab(.data, ..., .by = NULL, .desc = FALSE)

tab1(.data, ..., .by = NULL, .desc = FALSE, .type = c("list", "tibble"))

tab2(.data, ..., .flip = FALSE)

fre(.data, ..., .by = NULL, .desc = FALSE, .type = c("flextable", "tibble"))

fre1(
  .data,
  ...,
  .by = NULL,
  .desc = FALSE,
  .type = c("flextable", "list", "tibble")
)

fre2(.data, ..., .flip = FALSE, .type = c("flextable", "tibble"))
}
\arguments{
\item{.data}{A data frame, data frame extension
(e.g. a tibble), or a lazy data frame (e.g. from dbplyr or dtplyr).}

\item{...}{<\code{\link[=dplyr_tidy_select]{tidy-select}}> or
<\code{\link[=args_data_masking]{data-masking}}> Variables to tabulate.

Both tidyselect (e.g., \code{starts_with()}) and
data masking (e.g., \code{x_sq = x^2}) are supported.
See examples below.}

\item{.by}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

<\code{\link[dplyr:dplyr_tidy_select]{tidy-select}}> Optionally, a selection of columns to
group by for just this operation, functioning as an alternative to \code{\link[dplyr:group_by]{group_by()}}. For
details and examples, see \link[dplyr:dplyr_by]{?dplyr_by}.}

\item{.desc}{If TRUE, will show the largest groups at the top.}

\item{.type}{Output type. tab1() returns a list by default, and fre() functions return flextables by default.}

\item{.flip}{If TRUE, will transpose the output tibble.}
}
\value{
A tibble, a list of tibbles, or a flextable.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
Enhanced \code{count()}.
\itemize{
\item \code{tab()} - Tabulates variable(s) simultaneously, similar to \code{count()}.
\item \code{tab1()} - Tabulates variable(s) one by one.
\item \code{tab2()} - Cross-tabulates two variables.
\item \code{fre()} - Adds “Total” row(s) to the output of \code{tab()}.
\item \code{fre1()} - Adds “Total” row(s) to the output of \code{tab1()}.
\item \code{fre2()} - Adds a “Total” row and a “total” column to the output of \code{tab2()}.
}

\code{tab()} functions are suitable for subsequent data analysis, while \code{fre()} functions return flextables by default and are suitable for reporting.

If the output tibble has many rows, consider using
\code{print()} or \code{\link[=print_headtail]{print_headtail()}} to display the output.
}
\examples{
# tabulate the 8th column
tab(starwars, 8)

# tabulate the "sex" column
tab(starwars, sex)

tab(starwars, sex, .desc = TRUE)

fre(starwars, sex)

fre(starwars, sex, .desc = TRUE)

tab(starwars, sex, gender)

tab(starwars, sex == "male")

tab(starwars, male = sex == "male")

tab(starwars, ends_with("color"))

tab(starwars, s_match("s*e"))

tab(starwars)

tab1(starwars, 1:3)

tab1(starwars, ends_with("color"))

tab1(starwars, ends_with("color"), .type = "tibble")

fre1(starwars, ends_with("color"))

fre1(starwars, ends_with("color"), .type = "list")

tab2(starwars, sex, gender)

tab2(starwars, height, gender)

fre2(starwars, height, gender)
}
