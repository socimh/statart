[{"path":"https://socimh.github.io/statart/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 statart authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://socimh.github.io/statart/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Minghong Shen. Author, maintainer.","code":""},{"path":"https://socimh.github.io/statart/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shen M (2024). statart: Use Stata-like functions tidyverse. R package version 0.1.0, https://socimh.github.io/statart/, https://github.com/socimh/statart.","code":"@Manual{,   title = {statart: Use Stata-like functions in tidyverse},   author = {Minghong Shen},   year = {2024},   note = {R package version 0.1.0, https://socimh.github.io/statart/},   url = {https://github.com/socimh/statart}, }"},{"path":"https://socimh.github.io/statart/index.html","id":"statart","dir":"","previous_headings":"","what":"Use Stata-like functions in tidyverse","title":"Use Stata-like functions in tidyverse","text":"primary goal statart migrate useful commands (functions) Stata R. terms certain jobs, however, functions statart may perform better existing functions Stata R. functions built tidyverse framework, including codebook() codebook (like codebook Stata) summ() summary statistics (like summarize Stata) tab(), tab1(), tab2() frequency tables (like tab, tab1, tab2 Stata) fre(), fre1(), fre2() frequency tables total rows total columns (like fre Stata)","code":""},{"path":"https://socimh.github.io/statart/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Use Stata-like functions in tidyverse","text":"can install development version statart like :","code":"devtools::install_github(\"socimh/statart\")"},{"path":[]},{"path":"https://socimh.github.io/statart/index.html","id":"load-the-package","dir":"","previous_headings":"Example","what":"Load the package","title":"Use Stata-like functions in tidyverse","text":"highly recommend using tidyverse statart better performance.","code":"library(statart) library(tidyverse)"},{"path":"https://socimh.github.io/statart/index.html","id":"codebook","dir":"","previous_headings":"Example","what":"codebook()","title":"Use Stata-like functions in tidyverse","text":"View codebook lifeexp.","code":"codebook(lifeexp) #> # A tibble: 6 × 5 #>   variable  type             n unique label                    #>   <chr>     <chr>        <int>  <int> <chr>                    #> 1 region    double+label    68      3 Region                   #> 2 country   character       68     68 Country                  #> 3 popgrowth double          68     30 Avg. annual % growth     #> 4 lexp      double          68     18 Life expectancy at birth #> 5 gnppc     double          63     62 GNP per capita           #> 6 safewater double          40     29 Safe water"},{"path":"https://socimh.github.io/statart/index.html","id":"summ","dir":"","previous_headings":"Example","what":"summ()","title":"Use Stata-like functions in tidyverse","text":"Summarise numeric variables lifeexp. region factor variable, mean standard deviation may meaningless.","code":"summ(lifeexp) #> Warning: country is non-numeric and thus removed. #> Warning: region is a labelled variable (*). #> # A tibble: 5 × 8 #>   name      type        n unique   min     mean        sd   max #>   <chr>     <chr>   <dbl>  <dbl> <dbl>    <dbl>     <dbl> <dbl> #> 1 *region   dbl+lbl    68      3   1      1.5       0.743     3 #> 2 popgrowth dbl        68     30  -0.5    0.972     0.931     3 #> 3 lexp      dbl        68     18  54     72.3       4.72     79 #> 4 gnppc     dbl        63     62 370   8675.    10635.    39980 #> 5 safewater dbl        40     29  28     76.1      17.9     100"},{"path":"https://socimh.github.io/statart/index.html","id":"tab","dir":"","previous_headings":"Example","what":"tab()","title":"Use Stata-like functions in tidyverse","text":"Tabulate single variable: s_match() can select variables stata style. tab1() tabulates variables one one list. .append can flatten list tibble. tab2() cross-tabulates two variables.","code":"tab(starwars, sex) #> # A tibble: 5 × 6 #>   sex                n percent   cum valid valid_cum #>   <chr>          <int>   <dbl> <dbl> <dbl>     <dbl> #> 1 female            16   18.4   18.4 19.3       19.3 #> 2 hermaphroditic     1    1.15  19.5  1.20      20.5 #> 3 male              60   69.0   88.5 72.3       92.8 #> 4 none               6    6.90  95.4  7.23     100   #> 5 <NA>               4    4.60 100   NA         NA tab(starwars, s_match(\"*color\"))  #> # A tibble: 67 × 8 #>    hair_color    skin_color eye_color     n percent   cum valid valid_cum #>    <chr>         <chr>      <chr>     <int>   <dbl> <dbl> <dbl>     <dbl> #>  1 auburn        fair       blue          1    1.15  1.15  1.22      1.22 #>  2 auburn, grey  fair       blue          1    1.15  2.30  1.22      2.44 #>  3 auburn, white fair       blue-gray     1    1.15  3.45  1.22      3.66 #>  4 black         blue, grey yellow        1    1.15  4.60  1.22      4.88 #>  5 black         brown      brown         1    1.15  5.75  1.22      6.10 #>  6 black         dark       brown         3    3.45  9.20  3.66      9.76 #>  7 black         dark       dark          1    1.15 10.3   1.22     11.0  #>  8 black         fair       brown         2    2.30 12.6   2.44     13.4  #>  9 black         light      brown         1    1.15 13.8   1.22     14.6  #> 10 black         tan        brown         2    2.30 16.1   2.44     17.1  #> # ℹ 57 more rows tab1(starwars, s_match(\"*color\")) #> $hair_color #> # A tibble: 13 × 6 #>    value             n percent    cum valid valid_cum #>    <chr>         <int>   <dbl>  <dbl> <dbl>     <dbl> #>  1 auburn            1    1.15   1.15  1.22      1.22 #>  2 auburn, grey      1    1.15   2.30  1.22      2.44 #>  3 auburn, white     1    1.15   3.45  1.22      3.66 #>  4 black            13   14.9   18.4  15.9      19.5  #>  5 blond             3    3.45  21.8   3.66     23.2  #>  6 blonde            1    1.15  23.0   1.22     24.4  #>  7 brown            18   20.7   43.7  22.0      46.3  #>  8 brown, grey       1    1.15  44.8   1.22     47.6  #>  9 grey              1    1.15  46.0   1.22     48.8  #> 10 none             37   42.5   88.5  45.1      93.9  #> 11 unknown           1    1.15  89.7   1.22     95.1  #> 12 white             4    4.60  94.3   4.88    100    #> 13 <NA>              5    5.75 100    NA        NA    #>  #> $skin_color #> # A tibble: 31 × 6 #>    value                   n percent   cum valid valid_cum #>    <chr>               <int>   <dbl> <dbl> <dbl>     <dbl> #>  1 blue                    2    2.30  2.30  2.30      2.30 #>  2 blue, grey              2    2.30  4.60  2.30      4.60 #>  3 brown                   4    4.60  9.20  4.60      9.20 #>  4 brown mottle            1    1.15 10.3   1.15     10.3  #>  5 brown, white            1    1.15 11.5   1.15     11.5  #>  6 dark                    6    6.90 18.4   6.90     18.4  #>  7 fair                   17   19.5  37.9  19.5      37.9  #>  8 fair, green, yellow     1    1.15 39.1   1.15     39.1  #>  9 gold                    1    1.15 40.2   1.15     40.2  #> 10 green                   6    6.90 47.1   6.90     47.1  #> # ℹ 21 more rows #>  #> $eye_color #> # A tibble: 15 × 6 #>    value             n percent   cum valid valid_cum #>    <chr>         <int>   <dbl> <dbl> <dbl>     <dbl> #>  1 black            10   11.5   11.5 11.5       11.5 #>  2 blue             19   21.8   33.3 21.8       33.3 #>  3 blue-gray         1    1.15  34.5  1.15      34.5 #>  4 brown            21   24.1   58.6 24.1       58.6 #>  5 dark              1    1.15  59.8  1.15      59.8 #>  6 gold              1    1.15  60.9  1.15      60.9 #>  7 green, yellow     1    1.15  62.1  1.15      62.1 #>  8 hazel             3    3.45  65.5  3.45      65.5 #>  9 orange            8    9.20  74.7  9.20      74.7 #> 10 pink              1    1.15  75.9  1.15      75.9 #> 11 red               5    5.75  81.6  5.75      81.6 #> 12 red, blue         1    1.15  82.8  1.15      82.8 #> 13 unknown           3    3.45  86.2  3.45      86.2 #> 14 white             1    1.15  87.4  1.15      87.4 #> 15 yellow           11   12.6  100   12.6      100 tab1(starwars, s_match(\"*color\"), .append = TRUE) #> # A tibble: 59 × 7 #>    variable   value             n percent   cum valid valid_cum #>    <chr>      <chr>         <int>   <dbl> <dbl> <dbl>     <dbl> #>  1 hair_color auburn            1    1.15  1.15  1.22      1.22 #>  2 hair_color auburn, grey      1    1.15  2.30  1.22      2.44 #>  3 hair_color auburn, white     1    1.15  3.45  1.22      3.66 #>  4 hair_color black            13   14.9  18.4  15.9      19.5  #>  5 hair_color blond             3    3.45 21.8   3.66     23.2  #>  6 hair_color blonde            1    1.15 23.0   1.22     24.4  #>  7 hair_color brown            18   20.7  43.7  22.0      46.3  #>  8 hair_color brown, grey       1    1.15 44.8   1.22     47.6  #>  9 hair_color grey              1    1.15 46.0   1.22     48.8  #> 10 hair_color none             37   42.5  88.5  45.1      93.9  #> # ℹ 49 more rows tab2(starwars, s_match(\"*i*color\")) #> # A tibble: 13 × 32 #>    `hair_color \\\\ skin_color`  fair `blue, grey` brown  dark light   tan yellow #>    <chr>                      <int>        <int> <int> <int> <int> <int>  <int> #>  1 auburn                         1            0     0     0     0     0      0 #>  2 auburn, grey                   1            0     0     0     0     0      0 #>  3 auburn, white                  1            0     0     0     0     0      0 #>  4 black                          2            1     1     4     1     2      2 #>  5 blond                          3            0     0     0     0     0      0 #>  6 blonde                         0            0     0     0     0     0      0 #>  7 brown                          7            0     2     0     8     0      0 #>  8 brown, grey                    0            0     0     0     1     0      0 #>  9 grey                           0            0     0     0     0     0      0 #> 10 none                           0            1     1     2     1     0      0 #> 11 unknown                        0            0     0     0     0     0      0 #> 12 white                          2            0     0     0     0     0      0 #> 13 <NA>                           0            0     0     0     0     0      0 #> # ℹ 24 more variables: `fair, green, yellow` <int>, unknown <int>, pale <int>, #> #   blue <int>, `brown mottle` <int>, `brown, white` <int>, green <int>, #> #   `green, grey` <int>, grey <int>, `grey, blue` <int>, #> #   `grey, green, yellow` <int>, `grey, red` <int>, metal <int>, #> #   `mottled green` <int>, none <int>, orange <int>, red <int>, #> #   `red, blue, white` <int>, `silver, red` <int>, white <int>, #> #   `white, blue` <int>, gold <int>, `green-tan, brown` <int>, …"},{"path":"https://socimh.github.io/statart/index.html","id":"fre","dir":"","previous_headings":"Example","what":"fre()","title":"Use Stata-like functions in tidyverse","text":"fre() family functions simply add total rows (total columns fre2()) tab() counterparts. “Total” row added, subsequent analysis result becomes complicated, categories variable always converted character (.e., type “Total”). However, still keep functions print results comprehensive information.","code":"fre(starwars, sex) #> # A tibble: 7 × 6 #>   sex                n percent   cum  valid valid_cum #>   <chr>          <int>   <dbl> <dbl>  <dbl>     <dbl> #> 1 female            16   18.4   18.4  19.3       19.3 #> 2 hermaphroditic     1    1.15  19.5   1.20      20.5 #> 3 male              60   69.0   88.5  72.3       92.8 #> 4 none               6    6.90  95.4   7.23     100   #> 5 Valid Total       83   95.4   NA   100         NA   #> 6 <NA>               4    4.60 100    NA         NA   #> 7 Total             87  100     NA    NA         NA"},{"path":"https://socimh.github.io/statart/index.html","id":"s_-tools","dir":"","previous_headings":"Example","what":"s_…() tools","title":"Use Stata-like functions in tidyverse","text":"“s” stands statart “st_” already taken powerful geospatial package sf. Let briefly introduce . s_select() extends select() tidyverse enable data-masking features. example, know whether function works without error, use s_try(). Built pillar::type_sum() vctrs::vec_ptype_abbr(), s_type() returns type input object. s_print() designed viewing long data top bottom rows. s_time() shows time spent running function: … affect function result.","code":"starwars %>%   s_select(tall_characters = height > 100) #> # A tibble: 87 × 1 #>    tall_characters #>    <lgl>           #>  1 TRUE            #>  2 TRUE            #>  3 FALSE           #>  4 TRUE            #>  5 TRUE            #>  6 TRUE            #>  7 TRUE            #>  8 FALSE           #>  9 TRUE            #> 10 TRUE            #> # ℹ 77 more rows starwars %>%   select(tall_characters = height > 100) %>%   s_try() #> [1] FALSE  starwars %>%   s_select(tall_characters = height > 100) %>%   s_try() #> [1] TRUE s_type(lifeexp) #> [1] \"tibble\"  s_type(lifeexp$region) #> [1] \"double+label\" s_print(lifeexp) #> # A tibble: 68 × 6 #>        region country    popgrowth  lexp gnppc safewater #>    <hvn_lbll> <chr>          <dbl> <dbl> <dbl>     <dbl> #>  1          1 Albania        1.20     72   810        76 #>  2          1 Armenia        1.10     74   460        NA #>  3          1 Austria        0.400    79 26830        NA #>  4          1 Azerbaijan     1.40     71   480        NA #>  5          1 Belarus        0.300    68  2180        NA #> 64          3 Ecuador        2.40     70  1520        70 #> 65          3 Paraguay       2.90     70  1760        39 #> 66          3 Peru           2        69  2440        80 #> 67          3 Uruguay        0.700    74  6070        89 #> 68          3 Venezuela      2.40     73  3530        79 #> # ℹ 58 more rows in the middle #> # ℹ Use `s_print(n = ...)` to see more rows  lifeexp %>%   fre(safewater) %>%   s_print() #> # A tibble: 32 × 6 #>    safewater       n percent    cum valid valid_cum #>    <chr>       <int>   <dbl>  <dbl> <dbl>     <dbl> #>  1 28              1    1.47   1.47   2.5       2.5 #>  2 39              1    1.47   2.94   2.5       5   #>  3 55              3    4.41   7.35   7.5      12.5 #>  4 56              1    1.47   8.82   2.5      15   #>  5 57              1    1.47  10.3    2.5      17.5 #> 28 99              1    1.47  51.5    2.5      87.5 #> 29 100             5    7.35  58.8   12.5     100   #> 30 Valid Total    40   58.8   NA    100        NA   #> 31 <NA>           28   41.2  100     NA        NA   #> 32 Total          68  100     NA     NA        NA   #> # ℹ 22 more rows in the middle #> # ℹ Use `s_print(n = ...)` to see more rows summ_result <- lifeexp %>%   summ() %>%   s_time() #> Warning: country is non-numeric and thus removed. #> Warning: region is a labelled variable (*). #> Time spent: 0.071 secs summ_result #> # A tibble: 5 × 8 #>   name      type        n unique   min     mean        sd   max #>   <chr>     <chr>   <dbl>  <dbl> <dbl>    <dbl>     <dbl> <dbl> #> 1 *region   dbl+lbl    68      3   1      1.5       0.743     3 #> 2 popgrowth dbl        68     30  -0.5    0.972     0.931     3 #> 3 lexp      dbl        68     18  54     72.3       4.72     79 #> 4 gnppc     dbl        63     62 370   8675.    10635.    39980 #> 5 safewater dbl        40     29  28     76.1      17.9     100"},{"path":"https://socimh.github.io/statart/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Use Stata-like functions in tidyverse","text":"Please note statart project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://socimh.github.io/statart/reference/as_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Better type conversion — as_type","title":"Better type conversion — as_type","text":"improves performance converting several types variables.","code":""},{"path":"https://socimh.github.io/statart/reference/as_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Better type conversion — as_type","text":"","code":"as_character(.x)  as_numeric(.x)"},{"path":"https://socimh.github.io/statart/reference/as_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Better type conversion — as_type","text":".x vector matrix.","code":""},{"path":"https://socimh.github.io/statart/reference/as_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Better type conversion — as_type","text":"","code":"lifeexp %>%   dplyr::mutate(     region_chr = as_character(region),     region_num = as_numeric(region),     region_fct = haven::as_factor(region),     .keep = \"used\"   ) #> # A tibble: 68 × 4 #>    region               region_chr       region_num region_fct       #>    <dbl+lbl>            <chr>                 <dbl> <fct>            #>  1 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #>  2 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #>  3 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #>  4 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #>  5 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #>  6 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #>  7 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #>  8 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #>  9 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #> 10 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #> # ℹ 58 more rows"},{"path":"https://socimh.github.io/statart/reference/codebook.html","id":null,"dir":"Reference","previous_headings":"","what":"View the codebook of a dataset or selected variables. — codebook","title":"View the codebook of a dataset or selected variables. — codebook","text":"codebook() function view codebook dataset selected variables.","code":""},{"path":"https://socimh.github.io/statart/reference/codebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View the codebook of a dataset or selected variables. — codebook","text":"","code":"codebook(.data, ...)"},{"path":"https://socimh.github.io/statart/reference/codebook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View the codebook of a dataset or selected variables. — codebook","text":".data input data (data frame tibble). ... <tidy-select> One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables. argument can omitted.","code":""},{"path":"https://socimh.github.io/statart/reference/codebook.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View the codebook of a dataset or selected variables. — codebook","text":"object type .data.","code":""},{"path":"https://socimh.github.io/statart/reference/codebook.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View the codebook of a dataset or selected variables. — codebook","text":"","code":"starwars #> # A tibble: 87 × 14 #>    name     height  mass hair_color skin_color eye_color birth_year sex   gender #>    <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr>  #>  1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu… #>  2 C-3PO       167    75 NA         gold       yellow         112   none  mascu… #>  3 R2-D2        96    32 NA         white, bl… red             33   none  mascu… #>  4 Darth V…    202   136 none       white      yellow          41.9 male  mascu… #>  5 Leia Or…    150    49 brown      light      brown           19   fema… femin… #>  6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu… #>  7 Beru Wh…    165    75 brown      light      blue            47   fema… femin… #>  8 R5-D4        97    32 NA         white, red red             NA   none  mascu… #>  9 Biggs D…    183    84 black      light      brown           24   male  mascu… #> 10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu… #> # ℹ 77 more rows #> # ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>, #> #   vehicles <list>, starships <list> codebook(starwars) #> # A tibble: 14 × 4 #>    variable   type          n unique #>    <chr>      <chr>     <int>  <int> #>  1 name       character    87     87 #>  2 height     integer      81     45 #>  3 mass       double       59     38 #>  4 hair_color character    82     12 #>  5 skin_color character    87     31 #>  6 eye_color  character    87     15 #>  7 birth_year double       43     36 #>  8 sex        character    83      4 #>  9 gender     character    83      2 #> 10 homeworld  character    77     48 #> 11 species    character    83     37 #> 12 films      list         87     24 #> 13 vehicles   list         87     11 #> 14 starships  list         87     17 codebook(starwars, 1:4) #> # A tibble: 4 × 4 #>   variable   type          n unique #>   <chr>      <chr>     <int>  <int> #> 1 name       character    87     87 #> 2 height     integer      81     45 #> 3 mass       double       59     38 #> 4 hair_color character    82     12 codebook(starwars, ends_with(\"color\")) #> # A tibble: 3 × 4 #>   variable   type          n unique #>   <chr>      <chr>     <int>  <int> #> 1 hair_color character    82     12 #> 2 skin_color character    87     31 #> 3 eye_color  character    87     15 codebook(starwars, where(is.numeric)) #> # A tibble: 3 × 4 #>   variable   type        n unique #>   <chr>      <chr>   <int>  <int> #> 1 height     integer    81     45 #> 2 mass       double     59     38 #> 3 birth_year double     43     36 lifeexp #> # A tibble: 68 × 6 #>    region               country                popgrowth  lexp gnppc safewater #>    <dbl+lbl>            <chr>                      <dbl> <dbl> <dbl>     <dbl> #>  1 1 [Europe & C. Asia] Albania                    1.20     72   810        76 #>  2 1 [Europe & C. Asia] Armenia                    1.10     74   460        NA #>  3 1 [Europe & C. Asia] Austria                    0.400    79 26830        NA #>  4 1 [Europe & C. Asia] Azerbaijan                 1.40     71   480        NA #>  5 1 [Europe & C. Asia] Belarus                    0.300    68  2180        NA #>  6 1 [Europe & C. Asia] Belgium                    0.200    78 25380        NA #>  7 1 [Europe & C. Asia] Bosnia and Herzegovina    -0.5      73    NA        NA #>  8 1 [Europe & C. Asia] Bulgaria                  -0.400    71  1220        NA #>  9 1 [Europe & C. Asia] Croatia                   -0.100    73  4620        63 #> 10 1 [Europe & C. Asia] Czech Republic             0        75  5150        NA #> # ℹ 58 more rows codebook(lifeexp) #> # A tibble: 6 × 5 #>   variable  type             n unique label                    #>   <chr>     <chr>        <int>  <int> <chr>                    #> 1 region    double+label    68      3 Region                   #> 2 country   character       68     68 Country                  #> 3 popgrowth double          68     30 Avg. annual % growth     #> 4 lexp      double          68     18 Life expectancy at birth #> 5 gnppc     double          63     62 GNP per capita           #> 6 safewater double          40     29 Safe water"},{"path":"https://socimh.github.io/statart/reference/ds.html","id":null,"dir":"Reference","previous_headings":"","what":"List column names by tidyselect — ds","title":"List column names by tidyselect — ds","text":"List column names tidyselect","code":""},{"path":"https://socimh.github.io/statart/reference/ds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List column names by tidyselect — ds","text":"","code":"ds(.data, ...)"},{"path":"https://socimh.github.io/statart/reference/ds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List column names by tidyselect — ds","text":".data data frame ... <tidy-select> Variables select.","code":""},{"path":"https://socimh.github.io/statart/reference/ds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List column names by tidyselect — ds","text":"character vector column names.","code":""},{"path":"https://socimh.github.io/statart/reference/ds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List column names by tidyselect — ds","text":"","code":"ds(starwars) #>  [1] \"name\"       \"height\"     \"mass\"       \"hair_color\" \"skin_color\" #>  [6] \"eye_color\"  \"birth_year\" \"sex\"        \"gender\"     \"homeworld\"  #> [11] \"species\"    \"films\"      \"vehicles\"   \"starships\"  ds(starwars, homeworld:starships) #> [1] \"homeworld\" \"species\"   \"films\"     \"vehicles\"  \"starships\" ds(starwars, ends_with(\"color\")) #> [1] \"hair_color\" \"skin_color\" \"eye_color\"  ds(starwars, where(is.character)) #> [1] \"name\"       \"hair_color\" \"skin_color\" \"eye_color\"  \"sex\"        #> [6] \"gender\"     \"homeworld\"  \"species\""},{"path":"https://socimh.github.io/statart/reference/lifeexp.html","id":null,"dir":"Reference","previous_headings":"","what":"Life expectancy data in 1998 — lifeexp","title":"Life expectancy data in 1998 — lifeexp","text":"Imported example dataset lifeexp.dta Stata. dataset contains variable labels value labels.","code":""},{"path":"https://socimh.github.io/statart/reference/lifeexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Life expectancy data in 1998 — lifeexp","text":"","code":"lifeexp"},{"path":"https://socimh.github.io/statart/reference/lifeexp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Life expectancy data in 1998 — lifeexp","text":"tibble 68 rows 6 variables: region Region (value labels) country Country popgrowth Average annual population growth rate (%) lexp Life expectancy birth (years) gnppc GNP per capita safewater Safe water (%)","code":""},{"path":"https://socimh.github.io/statart/reference/lifeexp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Life expectancy data in 1998 — lifeexp","text":"","code":"lifeexp #> # A tibble: 68 × 6 #>    region               country                popgrowth  lexp gnppc safewater #>    <dbl+lbl>            <chr>                      <dbl> <dbl> <dbl>     <dbl> #>  1 1 [Europe & C. Asia] Albania                    1.20     72   810        76 #>  2 1 [Europe & C. Asia] Armenia                    1.10     74   460        NA #>  3 1 [Europe & C. Asia] Austria                    0.400    79 26830        NA #>  4 1 [Europe & C. Asia] Azerbaijan                 1.40     71   480        NA #>  5 1 [Europe & C. Asia] Belarus                    0.300    68  2180        NA #>  6 1 [Europe & C. Asia] Belgium                    0.200    78 25380        NA #>  7 1 [Europe & C. Asia] Bosnia and Herzegovina    -0.5      73    NA        NA #>  8 1 [Europe & C. Asia] Bulgaria                  -0.400    71  1220        NA #>  9 1 [Europe & C. Asia] Croatia                   -0.100    73  4620        63 #> 10 1 [Europe & C. Asia] Czech Republic             0        75  5150        NA #> # ℹ 58 more rows"},{"path":"https://socimh.github.io/statart/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://socimh.github.io/statart/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://socimh.github.io/statart/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://socimh.github.io/statart/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://socimh.github.io/statart/reference/s_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidyselect columns in stata style — s_match","title":"Tidyselect columns in stata style — s_match","text":"s_match() simpler version matches() <tidy-select>. designed select columns Stata-like style. matches(), s_match() must used within selecting function, ds() dplyr::across().","code":""},{"path":"https://socimh.github.io/statart/reference/s_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidyselect columns in stata style — s_match","text":"","code":"s_match(string, ignore.case = TRUE, vars = NULL)"},{"path":"https://socimh.github.io/statart/reference/s_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidyselect columns in stata style — s_match","text":"string character vector column names like selecting varlist Stata keep command. ignore.case TRUE, default, ignores case matching names. vars character vector variable names. supplied, variables taken current selection context (established functions like select() pivot_longer()).","code":""},{"path":"https://socimh.github.io/statart/reference/s_match.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tidyselect columns in stata style — s_match","text":"* matches zero characters. ~ matches one characters. ? matches one character. [-h] matches character range h. [1-12] matches number range 1 12. var1-var5 used select range variables. Use var1:var5 s_match() instead.","code":""},{"path":"https://socimh.github.io/statart/reference/s_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidyselect columns in stata style — s_match","text":"","code":"tb <- paste0(\"x\", 1:15) %>%   tibble::as_tibble() %>%   tidyr::pivot_wider(names_from = value) tb #> # A tibble: 1 × 15 #>   x1    x2    x3    x4    x5    x6    x7    x8    x9    x10   x11   x12   x13   #>   <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> #> 1 x1    x2    x3    x4    x5    x6    x7    x8    x9    x10   x11   x12   x13   #> # ℹ 2 more variables: x14 <chr>, x15 <chr>  # List variable names by ds() ds(tb) #>  [1] \"x1\"  \"x2\"  \"x3\"  \"x4\"  \"x5\"  \"x6\"  \"x7\"  \"x8\"  \"x9\"  \"x10\" \"x11\" \"x12\" #> [13] \"x13\" \"x14\" \"x15\"  tb %>%   ds(s_match(\"x1*\")) #> [1] \"x1\"  \"x10\" \"x11\" \"x12\" \"x13\" \"x14\" \"x15\" tb %>%   ds(s_match(\"x1~\")) #> [1] \"x10\" \"x11\" \"x12\" \"x13\" \"x14\" \"x15\" tb %>%   ds(s_match(\"*5\")) #> [1] \"x5\"  \"x15\" tb %>%   ds(s_match(\"?5\")) #> [1] \"x5\" tb %>%   ds(s_match(\"x[9-15]\")) #> [1] \"x9\"  \"x10\" \"x11\" \"x12\" \"x13\" \"x14\" \"x15\"  if (FALSE) { tb %>%   ds(s_match(\"x1-x5\")) }  tb %>%   ds(x1:x5) #> [1] \"x1\" \"x2\" \"x3\" \"x4\" \"x5\""},{"path":"https://socimh.github.io/statart/reference/s_print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a long tibble with its first and last rows — s_print","title":"Print a long tibble with its first and last rows — s_print","text":"Print long tibble first last rows","code":""},{"path":"https://socimh.github.io/statart/reference/s_print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a long tibble with its first and last rows — s_print","text":"","code":"s_print(   .data,   n = 5,   width = NULL,   ...,   max_extra_cols = NULL,   max_footer_lines = NULL )"},{"path":"https://socimh.github.io/statart/reference/s_print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a long tibble with its first and last rows — s_print","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). n positive integer. number rows show head tail. width positive integer. width printed tibble. ... Passed tbl_format_setup(). max_extra_cols Number extra columns print abbreviated information , width small entire tibble. NULL, max_extra_cols option used. previously defined n_extra argument soft-deprecated. max_footer_lines Maximum number footer lines. NULL, max_footer_lines option used.","code":""},{"path":"https://socimh.github.io/statart/reference/s_print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a long tibble with its first and last rows — s_print","text":"Print first last rows data. Return input data frame invisibly.","code":""},{"path":"https://socimh.github.io/statart/reference/s_print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a long tibble with its first and last rows — s_print","text":"","code":"s_print(starwars) #> # A tibble: 87 × 14 #>    name     height  mass hair_color skin_color eye_color birth_year sex   gender #>    <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr>  #>  1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu… #>  2 C-3PO       167    75 NA         gold       yellow         112   none  mascu… #>  3 R2-D2        96    32 NA         white, bl… red             33   none  mascu… #>  4 Darth V…    202   136 none       white      yellow          41.9 male  mascu… #>  5 Leia Or…    150    49 brown      light      brown           19   fema… femin… #> 83 Rey          NA    NA brown      light      hazel           NA   fema… femin… #> 84 Poe Dam…     NA    NA brown      light      brown           NA   male  mascu… #> 85 BB8          NA    NA none       none       black           NA   none  mascu… #> 86 Captain…     NA    NA unknown    unknown    unknown         NA   NA    NA     #> 87 Padmé A…    165    45 brown      light      brown           46   fema… femin… #> # ℹ 77 more rows in the middle #> # ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>, #> #   vehicles <list>, starships <list> #> # ℹ Use `s_print(n = ...)` to see more rows fre1(starwars, .append = TRUE) %>%   s_print() #> # A tibble: 437 × 7 #>     variable  value                             n percent    cum valid valid_cum #>     <chr>     <chr>                         <int>   <dbl>  <dbl> <dbl>     <dbl> #>   1 name      \"Ackbar\"                          1    1.15   1.15  1.15      1.15 #>   2 name      \"Adi Gallia\"                      1    1.15   2.30  1.15      2.30 #>   3 name      \"Anakin Skywalker\"                1    1.15   3.45  1.15      3.45 #>   4 name      \"Arvel Crynyd\"                    1    1.15   4.60  1.15      4.60 #>   5 name      \"Ayla Secura\"                     1    1.15   5.75  1.15      5.75 #> 433 starships \"Naboo fighter\"                   1    1.15  96.6   1.15     96.6  #> 434 starships \"Belbullab-22 starfighter\"        1    1.15  97.7   1.15     97.7  #> 435 starships \"T-70 X-wing fighter\"             1    1.15  98.9   1.15     98.9  #> 436 starships \"c(\\\"H-type Nubian yacht\\\", …     1    1.15 100     1.15    100    #> 437 starships \"Total\"                          87  100     NA    NA        NA    #> # ℹ 427 more rows in the middle #> # ℹ Use `s_print(n = ...)` to see more rows"},{"path":"https://socimh.github.io/statart/reference/s_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Enhanced select() with data-masking — s_select","title":"Enhanced select() with data-masking — s_select","text":"Enhanced select() data-masking","code":""},{"path":"https://socimh.github.io/statart/reference/s_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enhanced select() with data-masking — s_select","text":"","code":"s_select(.data, ...)"},{"path":"https://socimh.github.io/statart/reference/s_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enhanced select() with data-masking — s_select","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). ... <tidy-select> <data-masking> Variables tabulate. tidyselect (e.g., starts_with()) data masking (e.g., x_sq = x^2) supported. See examples .","code":""},{"path":"https://socimh.github.io/statart/reference/s_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enhanced select() with data-masking — s_select","text":"tibble","code":""},{"path":"https://socimh.github.io/statart/reference/s_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enhanced select() with data-masking — s_select","text":"","code":"starwars %>%   s_select() #> # A tibble: 87 × 14 #>    name     height  mass hair_color skin_color eye_color birth_year sex   gender #>    <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr>  #>  1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu… #>  2 C-3PO       167    75 NA         gold       yellow         112   none  mascu… #>  3 R2-D2        96    32 NA         white, bl… red             33   none  mascu… #>  4 Darth V…    202   136 none       white      yellow          41.9 male  mascu… #>  5 Leia Or…    150    49 brown      light      brown           19   fema… femin… #>  6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu… #>  7 Beru Wh…    165    75 brown      light      blue            47   fema… femin… #>  8 R5-D4        97    32 NA         white, red red             NA   none  mascu… #>  9 Biggs D…    183    84 black      light      brown           24   male  mascu… #> 10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu… #> # ℹ 77 more rows #> # ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>, #> #   vehicles <list>, starships <list> starwars %>%   s_select(name, height) #> # A tibble: 87 × 2 #>    name               height #>    <chr>               <int> #>  1 Luke Skywalker        172 #>  2 C-3PO                 167 #>  3 R2-D2                  96 #>  4 Darth Vader           202 #>  5 Leia Organa           150 #>  6 Owen Lars             178 #>  7 Beru Whitesun lars    165 #>  8 R5-D4                  97 #>  9 Biggs Darklighter     183 #> 10 Obi-Wan Kenobi        182 #> # ℹ 77 more rows if (FALSE) { starwars %>%   dplyr::select(height > 50) } starwars %>%   s_select(height > 50) #> # A tibble: 87 × 1 #>    `height > 50` #>    <lgl>         #>  1 TRUE          #>  2 TRUE          #>  3 TRUE          #>  4 TRUE          #>  5 TRUE          #>  6 TRUE          #>  7 TRUE          #>  8 TRUE          #>  9 TRUE          #> 10 TRUE          #> # ℹ 77 more rows"},{"path":"https://socimh.github.io/statart/reference/s_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Time spent on a function — s_time","title":"Time spent on a function — s_time","text":"Time spent function","code":""},{"path":"https://socimh.github.io/statart/reference/s_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time spent on a function — s_time","text":"","code":"s_time(.x)"},{"path":"https://socimh.github.io/statart/reference/s_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time spent on a function — s_time","text":".x function","code":""},{"path":"https://socimh.github.io/statart/reference/s_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time spent on a function — s_time","text":"function output","code":""},{"path":"https://socimh.github.io/statart/reference/s_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time spent on a function — s_time","text":"","code":"s_time(1:10) #> Time spent: 0.000 secs"},{"path":"https://socimh.github.io/statart/reference/s_try.html","id":null,"dir":"Reference","previous_headings":"","what":"Try a function and return a logical — s_try","title":"Try a function and return a logical — s_try","text":"Try function return logical","code":""},{"path":"https://socimh.github.io/statart/reference/s_try.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try a function and return a logical — s_try","text":"","code":"s_try(.fn)"},{"path":"https://socimh.github.io/statart/reference/s_try.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try a function and return a logical — s_try","text":".fn function call.","code":""},{"path":"https://socimh.github.io/statart/reference/s_try.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Try a function and return a logical — s_try","text":"logical value.","code":""},{"path":"https://socimh.github.io/statart/reference/s_type.html","id":null,"dir":"Reference","previous_headings":"","what":"The clean type of an object. — s_type","title":"The clean type of an object. — s_type","text":"clean type object.","code":""},{"path":"https://socimh.github.io/statart/reference/s_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The clean type of an object. — s_type","text":"","code":"s_type(.x, .abbr = FALSE)  s_unit(.x)"},{"path":"https://socimh.github.io/statart/reference/s_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The clean type of an object. — s_type","text":".x object. .abbr logical. TRUE, abbreviation type returned.","code":""},{"path":"https://socimh.github.io/statart/reference/s_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The clean type of an object. — s_type","text":"character.","code":""},{"path":"https://socimh.github.io/statart/reference/s_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The clean type of an object. — s_type","text":"","code":"s_type(1:10) #> [1] \"integer\" s_type(letters) #> [1] \"character\""},{"path":"https://socimh.github.io/statart/reference/starwars.html","id":null,"dir":"Reference","previous_headings":"","what":"Starwars characters — starwars","title":"Starwars characters — starwars","text":"original data, SWAPI, Star Wars API, https://swapi.py4e.com/, revised reflect additional research gender sex determinations characters.","code":""},{"path":"https://socimh.github.io/statart/reference/starwars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Starwars characters — starwars","text":"","code":"starwars"},{"path":"https://socimh.github.io/statart/reference/starwars.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Starwars characters — starwars","text":"tibble 87 rows 14 variables: name Name character height Height (cm) mass Weight (kg) hair_color,skin_color,eye_color Hair, skin, eye colors birth_year Year born (BBY = Battle Yavin) sex biological sex character, namely male, female, hermaphroditic, none (case Droids). gender gender role gender identity character determined personality way programmed (case Droids). homeworld Name homeworld species Name species films List films character appeared vehicles List vehicles character piloted starships List starships character piloted","code":""},{"path":"https://socimh.github.io/statart/reference/starwars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Starwars characters — starwars","text":"","code":"starwars #> # A tibble: 87 × 14 #>    name     height  mass hair_color skin_color eye_color birth_year sex   gender #>    <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr>  #>  1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu… #>  2 C-3PO       167    75 NA         gold       yellow         112   none  mascu… #>  3 R2-D2        96    32 NA         white, bl… red             33   none  mascu… #>  4 Darth V…    202   136 none       white      yellow          41.9 male  mascu… #>  5 Leia Or…    150    49 brown      light      brown           19   fema… femin… #>  6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu… #>  7 Beru Wh…    165    75 brown      light      blue            47   fema… femin… #>  8 R5-D4        97    32 NA         white, red red             NA   none  mascu… #>  9 Biggs D…    183    84 black      light      brown           24   male  mascu… #> 10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu… #> # ℹ 77 more rows #> # ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>, #> #   vehicles <list>, starships <list>"},{"path":"https://socimh.github.io/statart/reference/stat.html","id":null,"dir":"Reference","previous_headings":"","what":"Skewness and kurtosis — stat","title":"Skewness and kurtosis — stat","text":"Calculate skewness kurtosis","code":""},{"path":"https://socimh.github.io/statart/reference/stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skewness and kurtosis — stat","text":"","code":"skew(x, n)  kurtosis(x, n)"},{"path":"https://socimh.github.io/statart/reference/stat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skewness and kurtosis — stat","text":"x numeric vector n number observations","code":""},{"path":"https://socimh.github.io/statart/reference/stat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skewness and kurtosis — stat","text":"numeric value","code":""},{"path":"https://socimh.github.io/statart/reference/statart-package.html","id":null,"dir":"Reference","previous_headings":"","what":"statart: Use Stata-like functions in tidyverse — statart-package","title":"statart: Use Stata-like functions in tidyverse — statart-package","text":"learn statart, start vignettes: browseVignettes(package = \"statart\") learn statart, start vignettes: browseVignettes(package = \"statart\")","code":""},{"path":[]},{"path":"https://socimh.github.io/statart/reference/statart-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"statart: Use Stata-like functions in tidyverse — statart-package","text":"Maintainer: Minghong Shen mhshenaa@connect.ust.hk","code":""},{"path":"https://socimh.github.io/statart/reference/summ.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise columns — summ","title":"Summarise columns — summ","text":"Enhanced summarise().","code":""},{"path":"https://socimh.github.io/statart/reference/summ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise columns — summ","text":"","code":"summ(   .data,   ...,   .by = NULL,   .keep_all = FALSE,   .detail = FALSE,   .stat = character(0) )"},{"path":"https://socimh.github.io/statart/reference/summ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise columns — summ","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). ... <tidy-select> <data-masking> Variables tabulate. tidyselect (e.g., starts_with()) data masking (e.g., x_sq = x^2) supported. See examples . . <tidy-select> Optionally, selection columns group just operation, functioning alternative group_by(). details examples, see ?dplyr_by. .keep_all logical. TRUE, variables kept. .detail logical. TRUE, detailed summary returned. .stat character vector. specified, listed statistics returned.","code":""},{"path":"https://socimh.github.io/statart/reference/summ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise columns — summ","text":"tibble","code":""},{"path":"https://socimh.github.io/statart/reference/tab.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulate columns — tab","title":"Tabulate columns — tab","text":"Enhanced count(). tab() - Tabulates variable(s) simultaneously, similar count(). tab1() - Tabulates variable(s) one one. tab2() - Cross-tabulates two variables. fre() - Adds “Total” row(s) output tab(). fre1() - Adds “Total” row(s) output tab1(). fre2() - Adds “Total” row “total” column output tab2(). Overall, tab() functions suitable subsequent data analysis, fre() functions suitable printing. output tibble many rows, consider using print() s_print() display output.","code":""},{"path":"https://socimh.github.io/statart/reference/tab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulate columns — tab","text":"","code":"tab(.data, ..., .desc = FALSE)  tab1(.data, ..., .desc = FALSE, .append = FALSE)  tab2(.data, ..., .flip = FALSE)  fre(.data, ..., .desc = FALSE)  fre1(.data, ..., .desc = FALSE, .append = FALSE)  fre2(.data, ..., .flip = FALSE)"},{"path":"https://socimh.github.io/statart/reference/tab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulate columns — tab","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). ... <tidy-select> <data-masking> Variables tabulate. tidyselect (e.g., starts_with()) data masking (e.g., x_sq = x^2) supported. See examples . .desc TRUE, show largest groups top. .append TRUE, return single tibble instead list tibbles. .flip TRUE, transpose output tibble.","code":""},{"path":"https://socimh.github.io/statart/reference/tab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabulate columns — tab","text":"object type .data.","code":""},{"path":"https://socimh.github.io/statart/reference/tab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulate columns — tab","text":"","code":"tab(starwars, 8) #> # A tibble: 5 × 6 #>   sex                n percent   cum valid valid_cum #>   <chr>          <int>   <dbl> <dbl> <dbl>     <dbl> #> 1 female            16   18.4   18.4 19.3       19.3 #> 2 hermaphroditic     1    1.15  19.5  1.20      20.5 #> 3 male              60   69.0   88.5 72.3       92.8 #> 4 none               6    6.90  95.4  7.23     100   #> 5 NA                 4    4.60 100   NA         NA   tab(starwars, sex) #> # A tibble: 5 × 6 #>   sex                n percent   cum valid valid_cum #>   <chr>          <int>   <dbl> <dbl> <dbl>     <dbl> #> 1 female            16   18.4   18.4 19.3       19.3 #> 2 hermaphroditic     1    1.15  19.5  1.20      20.5 #> 3 male              60   69.0   88.5 72.3       92.8 #> 4 none               6    6.90  95.4  7.23     100   #> 5 NA                 4    4.60 100   NA         NA   tab(starwars, sex, .desc = TRUE) #> # A tibble: 5 × 6 #>   sex                n percent   cum valid valid_cum #>   <chr>          <int>   <dbl> <dbl> <dbl>     <dbl> #> 1 male              60   69.0   69.0 72.3       72.3 #> 2 female            16   18.4   87.4 19.3       91.6 #> 3 none               6    6.90  94.3  7.23      98.8 #> 4 hermaphroditic     1    1.15  95.4  1.20     100   #> 5 NA                 4    4.60 100   NA         NA   fre(starwars, sex) #> # A tibble: 7 × 6 #>   sex                n percent   cum  valid valid_cum #>   <chr>          <int>   <dbl> <dbl>  <dbl>     <dbl> #> 1 female            16   18.4   18.4  19.3       19.3 #> 2 hermaphroditic     1    1.15  19.5   1.20      20.5 #> 3 male              60   69.0   88.5  72.3       92.8 #> 4 none               6    6.90  95.4   7.23     100   #> 5 Valid Total       83   95.4   NA   100         NA   #> 6 NA                 4    4.60 100    NA         NA   #> 7 Total             87  100     NA    NA         NA   fre(starwars, sex, .desc = TRUE) #> # A tibble: 7 × 6 #>   sex                n percent   cum  valid valid_cum #>   <chr>          <int>   <dbl> <dbl>  <dbl>     <dbl> #> 1 male              60   69.0   69.0  72.3       72.3 #> 2 female            16   18.4   87.4  19.3       91.6 #> 3 none               6    6.90  94.3   7.23      98.8 #> 4 hermaphroditic     1    1.15  95.4   1.20     100   #> 5 Valid Total       83   95.4   NA   100         NA   #> 6 NA                 4    4.60 100    NA         NA   #> 7 Total             87  100     NA    NA         NA    tab(starwars, sex, gender) #> # A tibble: 6 × 7 #>   sex            gender        n percent   cum valid valid_cum #>   <chr>          <chr>     <int>   <dbl> <dbl> <dbl>     <dbl> #> 1 female         feminine     16   18.4   18.4 19.3       19.3 #> 2 hermaphroditic masculine     1    1.15  19.5  1.20      20.5 #> 3 male           masculine    60   69.0   88.5 72.3       92.8 #> 4 none           feminine      1    1.15  89.7  1.20      94.0 #> 5 none           masculine     5    5.75  95.4  6.02     100   #> 6 NA             NA            4    4.60 100   NA         NA   tab(starwars, sex == \"male\") #> # A tibble: 3 × 6 #>   `sex == \"male\"`     n percent   cum valid valid_cum #>   <lgl>           <int>   <dbl> <dbl> <dbl>     <dbl> #> 1 FALSE              23   26.4   26.4  27.7      27.7 #> 2 TRUE               60   69.0   95.4  72.3     100   #> 3 NA                  4    4.60 100    NA        NA   tab(starwars, male = sex == \"male\") #> # A tibble: 3 × 6 #>   male      n percent   cum valid valid_cum #>   <lgl> <int>   <dbl> <dbl> <dbl>     <dbl> #> 1 FALSE    23   26.4   26.4  27.7      27.7 #> 2 TRUE     60   69.0   95.4  72.3     100   #> 3 NA        4    4.60 100    NA        NA   tab(starwars, ends_with(\"color\")) #> # A tibble: 67 × 8 #>    hair_color    skin_color eye_color     n percent   cum valid valid_cum #>    <chr>         <chr>      <chr>     <int>   <dbl> <dbl> <dbl>     <dbl> #>  1 auburn        fair       blue          1    1.15  1.15  1.22      1.22 #>  2 auburn, grey  fair       blue          1    1.15  2.30  1.22      2.44 #>  3 auburn, white fair       blue-gray     1    1.15  3.45  1.22      3.66 #>  4 black         blue, grey yellow        1    1.15  4.60  1.22      4.88 #>  5 black         brown      brown         1    1.15  5.75  1.22      6.10 #>  6 black         dark       brown         3    3.45  9.20  3.66      9.76 #>  7 black         dark       dark          1    1.15 10.3   1.22     11.0  #>  8 black         fair       brown         2    2.30 12.6   2.44     13.4  #>  9 black         light      brown         1    1.15 13.8   1.22     14.6  #> 10 black         tan        brown         2    2.30 16.1   2.44     17.1  #> # ℹ 57 more rows tab(starwars, s_match(\"s*e\")) #> # A tibble: 1 × 5 #>       n percent   cum valid valid_cum #>   <int>   <dbl> <dbl> <dbl>     <dbl> #> 1    87     100   100   100       100 tab(starwars) #> # A tibble: 87 × 19 #>    name     height  mass hair_color skin_color eye_color birth_year sex   gender #>    <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr>  #>  1 Ackbar      180  83   none       brown mot… orange          41   male  mascu… #>  2 Anakin …    188  84   blond      fair       blue            41.9 male  mascu… #>  3 Ayla Se…    178  55   none       blue       hazel           48   fema… femin… #>  4 Barriss…    166  50   black      yellow     blue            40   fema… femin… #>  5 Beru Wh…    165  75   brown      light      blue            47   fema… femin… #>  6 Biggs D…    183  84   black      light      brown           24   male  mascu… #>  7 Boba Fe…    183  78.2 black      fair       brown           31.5 male  mascu… #>  8 Bossk       190 113   none       green      red             53   male  mascu… #>  9 Chewbac…    228 112   brown      unknown    blue           200   male  mascu… #> 10 Darth M…    175  80   none       red        yellow          54   male  mascu… #> # ℹ 77 more rows #> # ℹ 10 more variables: homeworld <chr>, species <chr>, films <list>, #> #   vehicles <list>, starships <list>, n <int>, percent <dbl>, cum <dbl>, #> #   valid <dbl>, valid_cum <dbl>  tab1(starwars, 1:3) #> $name #> # A tibble: 87 × 6 #>    value                   n percent   cum valid valid_cum #>    <chr>               <int>   <dbl> <dbl> <dbl>     <dbl> #>  1 Ackbar                  1    1.15  1.15  1.15      1.15 #>  2 Adi Gallia              1    1.15  2.30  1.15      2.30 #>  3 Anakin Skywalker        1    1.15  3.45  1.15      3.45 #>  4 Arvel Crynyd            1    1.15  4.60  1.15      4.60 #>  5 Ayla Secura             1    1.15  5.75  1.15      5.75 #>  6 BB8                     1    1.15  6.90  1.15      6.90 #>  7 Bail Prestor Organa     1    1.15  8.05  1.15      8.05 #>  8 Barriss Offee           1    1.15  9.20  1.15      9.20 #>  9 Ben Quadinaros          1    1.15 10.3   1.15     10.3  #> 10 Beru Whitesun lars      1    1.15 11.5   1.15     11.5  #> # ℹ 77 more rows #>  #> $height #> # A tibble: 46 × 6 #>    value     n percent   cum valid valid_cum #>    <int> <int>   <dbl> <dbl> <dbl>     <dbl> #>  1    66     1    1.15  1.15  1.23      1.23 #>  2    79     1    1.15  2.30  1.23      2.47 #>  3    88     1    1.15  3.45  1.23      3.70 #>  4    94     1    1.15  4.60  1.23      4.94 #>  5    96     2    2.30  6.90  2.47      7.41 #>  6    97     1    1.15  8.05  1.23      8.64 #>  7   112     1    1.15  9.20  1.23      9.88 #>  8   122     1    1.15 10.3   1.23     11.1  #>  9   137     1    1.15 11.5   1.23     12.3  #> 10   150     2    2.30 13.8   2.47     14.8  #> # ℹ 36 more rows #>  #> $mass #> # A tibble: 39 × 6 #>    value     n percent   cum valid valid_cum #>    <dbl> <int>   <dbl> <dbl> <dbl>     <dbl> #>  1    15     1    1.15  1.15  1.69      1.69 #>  2    17     1    1.15  2.30  1.69      3.39 #>  3    20     1    1.15  3.45  1.69      5.08 #>  4    32     2    2.30  5.75  3.39      8.47 #>  5    40     1    1.15  6.90  1.69     10.2  #>  6    45     2    2.30  9.20  3.39     13.6  #>  7    48     2    2.30 11.5   3.39     16.9  #>  8    49     1    1.15 12.6   1.69     18.6  #>  9    50     2    2.30 14.9   3.39     22.0  #> 10    55     2    2.30 17.2   3.39     25.4  #> # ℹ 29 more rows #>  tab1(starwars, ends_with(\"color\")) #> $hair_color #> # A tibble: 13 × 6 #>    value             n percent    cum valid valid_cum #>    <chr>         <int>   <dbl>  <dbl> <dbl>     <dbl> #>  1 auburn            1    1.15   1.15  1.22      1.22 #>  2 auburn, grey      1    1.15   2.30  1.22      2.44 #>  3 auburn, white     1    1.15   3.45  1.22      3.66 #>  4 black            13   14.9   18.4  15.9      19.5  #>  5 blond             3    3.45  21.8   3.66     23.2  #>  6 blonde            1    1.15  23.0   1.22     24.4  #>  7 brown            18   20.7   43.7  22.0      46.3  #>  8 brown, grey       1    1.15  44.8   1.22     47.6  #>  9 grey              1    1.15  46.0   1.22     48.8  #> 10 none             37   42.5   88.5  45.1      93.9  #> 11 unknown           1    1.15  89.7   1.22     95.1  #> 12 white             4    4.60  94.3   4.88    100    #> 13 NA                5    5.75 100    NA        NA    #>  #> $skin_color #> # A tibble: 31 × 6 #>    value                   n percent   cum valid valid_cum #>    <chr>               <int>   <dbl> <dbl> <dbl>     <dbl> #>  1 blue                    2    2.30  2.30  2.30      2.30 #>  2 blue, grey              2    2.30  4.60  2.30      4.60 #>  3 brown                   4    4.60  9.20  4.60      9.20 #>  4 brown mottle            1    1.15 10.3   1.15     10.3  #>  5 brown, white            1    1.15 11.5   1.15     11.5  #>  6 dark                    6    6.90 18.4   6.90     18.4  #>  7 fair                   17   19.5  37.9  19.5      37.9  #>  8 fair, green, yellow     1    1.15 39.1   1.15     39.1  #>  9 gold                    1    1.15 40.2   1.15     40.2  #> 10 green                   6    6.90 47.1   6.90     47.1  #> # ℹ 21 more rows #>  #> $eye_color #> # A tibble: 15 × 6 #>    value             n percent   cum valid valid_cum #>    <chr>         <int>   <dbl> <dbl> <dbl>     <dbl> #>  1 black            10   11.5   11.5 11.5       11.5 #>  2 blue             19   21.8   33.3 21.8       33.3 #>  3 blue-gray         1    1.15  34.5  1.15      34.5 #>  4 brown            21   24.1   58.6 24.1       58.6 #>  5 dark              1    1.15  59.8  1.15      59.8 #>  6 gold              1    1.15  60.9  1.15      60.9 #>  7 green, yellow     1    1.15  62.1  1.15      62.1 #>  8 hazel             3    3.45  65.5  3.45      65.5 #>  9 orange            8    9.20  74.7  9.20      74.7 #> 10 pink              1    1.15  75.9  1.15      75.9 #> 11 red               5    5.75  81.6  5.75      81.6 #> 12 red, blue         1    1.15  82.8  1.15      82.8 #> 13 unknown           3    3.45  86.2  3.45      86.2 #> 14 white             1    1.15  87.4  1.15      87.4 #> 15 yellow           11   12.6  100   12.6      100   #>  tab1(starwars, ends_with(\"color\"), .append = TRUE) #> # A tibble: 59 × 7 #>    variable   value             n percent   cum valid valid_cum #>    <chr>      <chr>         <int>   <dbl> <dbl> <dbl>     <dbl> #>  1 hair_color auburn            1    1.15  1.15  1.22      1.22 #>  2 hair_color auburn, grey      1    1.15  2.30  1.22      2.44 #>  3 hair_color auburn, white     1    1.15  3.45  1.22      3.66 #>  4 hair_color black            13   14.9  18.4  15.9      19.5  #>  5 hair_color blond             3    3.45 21.8   3.66     23.2  #>  6 hair_color blonde            1    1.15 23.0   1.22     24.4  #>  7 hair_color brown            18   20.7  43.7  22.0      46.3  #>  8 hair_color brown, grey       1    1.15 44.8   1.22     47.6  #>  9 hair_color grey              1    1.15 46.0   1.22     48.8  #> 10 hair_color none             37   42.5  88.5  45.1      93.9  #> # ℹ 49 more rows fre1(starwars, ends_with(\"color\"), .append = TRUE) #> # A tibble: 63 × 7 #>    variable   value             n percent   cum valid valid_cum #>    <chr>      <chr>         <int>   <dbl> <dbl> <dbl>     <dbl> #>  1 hair_color auburn            1    1.15  1.15  1.22      1.22 #>  2 hair_color auburn, grey      1    1.15  2.30  1.22      2.44 #>  3 hair_color auburn, white     1    1.15  3.45  1.22      3.66 #>  4 hair_color black            13   14.9  18.4  15.9      19.5  #>  5 hair_color blond             3    3.45 21.8   3.66     23.2  #>  6 hair_color blonde            1    1.15 23.0   1.22     24.4  #>  7 hair_color brown            18   20.7  43.7  22.0      46.3  #>  8 hair_color brown, grey       1    1.15 44.8   1.22     47.6  #>  9 hair_color grey              1    1.15 46.0   1.22     48.8  #> 10 hair_color none             37   42.5  88.5  45.1      93.9  #> # ℹ 53 more rows fre1(starwars, ends_with(\"color\"), .append = TRUE) %>% s_print() #> # A tibble: 63 × 7 #>    variable   value             n percent    cum valid valid_cum #>    <chr>      <chr>         <int>   <dbl>  <dbl> <dbl>     <dbl> #>  1 hair_color auburn            1    1.15   1.15  1.22      1.22 #>  2 hair_color auburn, grey      1    1.15   2.30  1.22      2.44 #>  3 hair_color auburn, white     1    1.15   3.45  1.22      3.66 #>  4 hair_color black            13   14.9   18.4  15.9      19.5  #>  5 hair_color blond             3    3.45  21.8   3.66     23.2  #> 59 eye_color  red, blue         1    1.15  82.8   1.15     82.8  #> 60 eye_color  unknown           3    3.45  86.2   3.45     86.2  #> 61 eye_color  white             1    1.15  87.4   1.15     87.4  #> 62 eye_color  yellow           11   12.6  100    12.6     100    #> 63 eye_color  Total            87  100     NA    NA        NA    #> # ℹ 53 more rows in the middle #> # ℹ Use `s_print(n = ...)` to see more rows  tab2(starwars, sex, gender) #> # A tibble: 5 × 4 #>   `sex \\\\ gender` feminine masculine  `NA` #>   <chr>              <int>     <int> <int> #> 1 female                16         0     0 #> 2 hermaphroditic         0         1     0 #> 3 male                   0        60     0 #> 4 none                   1         5     0 #> 5 NA                     0         0     4 tab2(starwars, height, gender) #> # A tibble: 46 × 4 #>    `height \\\\ gender` masculine feminine  `NA` #>                 <int>     <int>    <int> <int> #>  1                 66         1        0     0 #>  2                 79         1        0     0 #>  3                 88         1        0     0 #>  4                 94         1        0     0 #>  5                 96         1        1     0 #>  6                 97         1        0     0 #>  7                112         1        0     0 #>  8                122         1        0     0 #>  9                137         1        0     0 #> 10                150         0        2     0 #> # ℹ 36 more rows fre2(starwars, height, gender) #> # A tibble: 47 × 5 #>    `height \\\\ gender` masculine feminine  `NA` total #>    <chr>                  <int>    <int> <int> <int> #>  1 66                         1        0     0     1 #>  2 79                         1        0     0     1 #>  3 88                         1        0     0     1 #>  4 94                         1        0     0     1 #>  5 96                         1        1     0     2 #>  6 97                         1        0     0     1 #>  7 112                        1        0     0     1 #>  8 122                        1        0     0     1 #>  9 137                        1        0     0     1 #> 10 150                        0        2     0     2 #> # ℹ 37 more rows fre2(starwars, height, gender) %>% s_print() #> # A tibble: 47 × 5 #>    `height \\\\ gender` masculine feminine  `NA` total #>    <chr>                  <int>    <int> <int> <int> #>  1 66                         1        0     0     1 #>  2 79                         1        0     0     1 #>  3 88                         1        0     0     1 #>  4 94                         1        0     0     1 #>  5 96                         1        1     0     2 #> 43 229                        1        0     0     1 #> 44 234                        1        0     0     1 #> 45 264                        1        0     0     1 #> 46 NA                         4        1     1     6 #> 47 total                     66       17     4    87 #> # ℹ 37 more rows in the middle #> # ℹ Use `s_print(n = ...)` to see more rows"}]
