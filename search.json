[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 statart authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Minghong Shen. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shen M (2024). statart: Tidy Functions Stata Functionality. R package version 0.1.1, https://socimh.github.io/statart/, https://github.com/socimh/statart.","code":"@Manual{,   title = {statart: Tidy Functions with Stata Functionality},   author = {Minghong Shen},   year = {2024},   note = {R package version 0.1.1, https://socimh.github.io/statart/},   url = {https://github.com/socimh/statart}, }"},{"path":"/index.html","id":"statart","dir":"","previous_headings":"","what":"Tidy Functions with Stata Functionality","title":"Tidy Functions with Stata Functionality","text":"statart set functions combines Stata-inspired features tidyverse-style operations.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tidy Functions with Stata Functionality","text":"can install development version statart like :","code":"devtools::install_github(\"socimh/statart\")"},{"path":[]},{"path":"/index.html","id":"load-the-package","dir":"","previous_headings":"Example","what":"Load the package","title":"Tidy Functions with Stata Functionality","text":"highly recommend using tidyverse statart better performance.","code":"library(statart) library(tidyverse)"},{"path":"/index.html","id":"codebook","dir":"","previous_headings":"Example","what":"codebook()","title":"Tidy Functions with Stata Functionality","text":"View codebook lifeexp.","code":"codebook(lifeexp) #> # A tibble: 6 × 5 #>   variable  label                    type             n unique #>   <chr>     <chr>                    <chr>        <int>  <int> #> 1 region    Region                   double+label    68      3 #> 2 country   Country                  character       68     68 #> 3 popgrowth Avg. annual % growth     double          68     30 #> 4 lexp      Life expectancy at birth double          68     18 #> 5 gnppc     GNP per capita           double          63     62 #> 6 safewater Safe water               double          40     29"},{"path":"/index.html","id":"summ","dir":"","previous_headings":"Example","what":"summ()","title":"Tidy Functions with Stata Functionality","text":"Summarise numeric variables lifeexp. region factor variable, mean standard deviation may meaningless.","code":"summ(lifeexp) #> Warning: country is non-numeric and thus removed. #> Warning: region is a labelled variable (*). #> # A tibble: 5 × 8 #>   name      type        n unique   min     mean        sd   max #>   <chr>     <chr>   <dbl>  <dbl> <dbl>    <dbl>     <dbl> <dbl> #> 1 *region   dbl+lbl    68      3   1      1.5       0.743     3 #> 2 popgrowth dbl        68     30  -0.5    0.972     0.931     3 #> 3 lexp      dbl        68     18  54     72.3       4.72     79 #> 4 gnppc     dbl        63     62 370   8675.    10635.    39980 #> 5 safewater dbl        40     29  28     76.1      17.9     100"},{"path":"/index.html","id":"tab","dir":"","previous_headings":"Example","what":"tab()","title":"Tidy Functions with Stata Functionality","text":"Tabulate single variable: tab1() tabulates variables one one list, s_match() can select variables stata style. tab2() cross-tabulates two variables.","code":"tab(starwars, sex) #> # A tibble: 5 × 6 #>   sex                n percent   cum valid valid_cum #>   <chr>          <int>   <dbl> <dbl> <dbl>     <dbl> #> 1 female            16   18.4   18.4 19.3       19.3 #> 2 hermaphroditic     1    1.15  19.5  1.20      20.5 #> 3 male              60   69.0   88.5 72.3       92.8 #> 4 none               6    6.90  95.4  7.23     100   #> 5 <NA>               4    4.60 100   NA         NA tab1(starwars, s_match(\"*color\")) #> $hair_color #> # A tibble: 13 × 6 #>    value             n percent    cum valid valid_cum #>    <chr>         <int>   <dbl>  <dbl> <dbl>     <dbl> #>  1 auburn            1    1.15   1.15  1.22      1.22 #>  2 auburn, grey      1    1.15   2.30  1.22      2.44 #>  3 auburn, white     1    1.15   3.45  1.22      3.66 #>  4 black            13   14.9   18.4  15.9      19.5  #>  5 blond             3    3.45  21.8   3.66     23.2  #>  6 blonde            1    1.15  23.0   1.22     24.4  #>  7 brown            18   20.7   43.7  22.0      46.3  #>  8 brown, grey       1    1.15  44.8   1.22     47.6  #>  9 grey              1    1.15  46.0   1.22     48.8  #> 10 none             37   42.5   88.5  45.1      93.9  #> 11 unknown           1    1.15  89.7   1.22     95.1  #> 12 white             4    4.60  94.3   4.88    100    #> 13 <NA>              5    5.75 100    NA        NA    #>  #> $skin_color #> # A tibble: 31 × 6 #>    value                   n percent   cum valid valid_cum #>    <chr>               <int>   <dbl> <dbl> <dbl>     <dbl> #>  1 blue                    2    2.30  2.30  2.30      2.30 #>  2 blue, grey              2    2.30  4.60  2.30      4.60 #>  3 brown                   4    4.60  9.20  4.60      9.20 #>  4 brown mottle            1    1.15 10.3   1.15     10.3  #>  5 brown, white            1    1.15 11.5   1.15     11.5  #>  6 dark                    6    6.90 18.4   6.90     18.4  #>  7 fair                   17   19.5  37.9  19.5      37.9  #>  8 fair, green, yellow     1    1.15 39.1   1.15     39.1  #>  9 gold                    1    1.15 40.2   1.15     40.2  #> 10 green                   6    6.90 47.1   6.90     47.1  #> # ℹ 21 more rows #>  #> $eye_color #> # A tibble: 15 × 6 #>    value             n percent   cum valid valid_cum #>    <chr>         <int>   <dbl> <dbl> <dbl>     <dbl> #>  1 black            10   11.5   11.5 11.5       11.5 #>  2 blue             19   21.8   33.3 21.8       33.3 #>  3 blue-gray         1    1.15  34.5  1.15      34.5 #>  4 brown            21   24.1   58.6 24.1       58.6 #>  5 dark              1    1.15  59.8  1.15      59.8 #>  6 gold              1    1.15  60.9  1.15      60.9 #>  7 green, yellow     1    1.15  62.1  1.15      62.1 #>  8 hazel             3    3.45  65.5  3.45      65.5 #>  9 orange            8    9.20  74.7  9.20      74.7 #> 10 pink              1    1.15  75.9  1.15      75.9 #> 11 red               5    5.75  81.6  5.75      81.6 #> 12 red, blue         1    1.15  82.8  1.15      82.8 #> 13 unknown           3    3.45  86.2  3.45      86.2 #> 14 white             1    1.15  87.4  1.15      87.4 #> 15 yellow           11   12.6  100   12.6      100 tab2(starwars, sex, gender) #> # A tibble: 5 × 4 #>   `sex \\\\ gender` feminine masculine  `NA` #>   <chr>              <int>     <int> <int> #> 1 female                16         0     0 #> 2 hermaphroditic         0         1     0 #> 3 male                   0        60     0 #> 4 none                   1         5     0 #> 5 <NA>                   0         0     4"},{"path":"/index.html","id":"fre","dir":"","previous_headings":"Example","what":"fre()","title":"Tidy Functions with Stata Functionality","text":"fre() family functions simply add total rows (total columns fre2()) tab() counterparts.","code":"fre(starwars, sex)"},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Tidy Functions with Stata Functionality","text":"Please note statart project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/reference/browse.html","id":null,"dir":"Reference","previous_headings":"","what":"Browse columns like Stata's browse command — browse","title":"Browse columns like Stata's browse command — browse","text":"Browse columns like Stata's browse command","code":""},{"path":"/reference/browse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Browse columns like Stata's browse command — browse","text":"","code":"browse(.data, ...)"},{"path":"/reference/browse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Browse columns like Stata's browse command — browse","text":".data data frame ... <tidy-select> <data-masking> Variables browse. argument can omitted.","code":""},{"path":"/reference/browse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Browse columns like Stata's browse command — browse","text":"character vector column names.","code":""},{"path":[]},{"path":"/reference/browse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Browse columns like Stata's browse command — browse","text":"","code":"browse(starwars) browse(starwars, name:mass) browse(starwars, s_match(\"*color\"))"},{"path":"/reference/codebook.html","id":null,"dir":"Reference","previous_headings":"","what":"View the codebook of a dataset or selected columns — codebook","title":"View the codebook of a dataset or selected columns — codebook","text":"codebook() function view codebook dataset selected variables. codebook_detail() show detailed information. wrapper datawizard::data_codebook() better output format.","code":""},{"path":"/reference/codebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View the codebook of a dataset or selected columns — codebook","text":"","code":"codebook(.data, ...)  codebook_detail(   .data,   ...,   .type = c(\"flextable\", \"tibble\"),   n = Inf,   max_values = 10,   range_at = 6,   verbose = TRUE )"},{"path":"/reference/codebook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View the codebook of a dataset or selected columns — codebook","text":".data input data (data frame tibble). ... <tidy-select> <data-masking> Variables include codebook. argument can omitted. .type output type. Default codebook_detail() \"flextable\". n number rows display. Default Inf. max_values Number maximum values displayed. Can used avoid many rows variables lots unique values. range_at Indicates many unique values numeric vector needed order print range variable instead frequency table numeric values. Can useful data contains numeric variables unique values full frequency tables instead value ranges displayed. verbose Toggle warnings messages .","code":""},{"path":"/reference/codebook.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View the codebook of a dataset or selected columns — codebook","text":"tibble flextable.","code":""},{"path":[]},{"path":"/reference/codebook.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View the codebook of a dataset or selected columns — codebook","text":"id name label type missings values n prop row_id character character character character character character character character integer 1 country Country character 0 (0.0%) Albania 1 1.5% 1      Argentina 1 1.5% 1      Armenia 1 1.5% 1      Austria 1 1.5% 1      Azerbaijan 1 1.5% 1      Belarus 1 1.5% 1      Belgium 1 1.5% 1      Bolivia 1 1.5% 1      Bosnia Herzegovina 1 1.5% 1      Brazil 1 1.5% 1      (...)   1         1 2 popgrowth Avg. annual % growth numeric 0 (0.0%) [-0.5, 3] 68  2         2 3 lexp Life expectancy birth numeric 0 (0.0%) [54, 79] 68  3         3 4 gnppc GNP per capita numeric 5 (7.4%) [370, 39980] 63  4         4 5 safewater Safe water numeric 28 (41.2%) [28, 100] 40  5         5 n: 20","code":"starwars #> # A tibble: 87 × 14 #>    name     height  mass hair_color skin_color eye_color birth_year sex   gender #>    <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr>  #>  1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu… #>  2 C-3PO       167    75 NA         gold       yellow         112   none  mascu… #>  3 R2-D2        96    32 NA         white, bl… red             33   none  mascu… #>  4 Darth V…    202   136 none       white      yellow          41.9 male  mascu… #>  5 Leia Or…    150    49 brown      light      brown           19   fema… femin… #>  6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu… #>  7 Beru Wh…    165    75 brown      light      blue            47   fema… femin… #>  8 R5-D4        97    32 NA         white, red red             NA   none  mascu… #>  9 Biggs D…    183    84 black      light      brown           24   male  mascu… #> 10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu… #> # ℹ 77 more rows #> # ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>, #> #   vehicles <list>, starships <list>  codebook(starwars) #> # A tibble: 14 × 4 #>    variable   type          n unique #>    <chr>      <chr>     <int>  <int> #>  1 name       character    87     87 #>  2 height     integer      81     45 #>  3 mass       double       59     38 #>  4 hair_color character    82     12 #>  5 skin_color character    87     31 #>  6 eye_color  character    87     15 #>  7 birth_year double       43     36 #>  8 sex        character    83      4 #>  9 gender     character    83      2 #> 10 homeworld  character    77     48 #> 11 species    character    83     37 #> 12 films      list         87     24 #> 13 vehicles   list         87     11 #> 14 starships  list         87     17  codebook(starwars, 1:4) #> # A tibble: 4 × 4 #>   variable   type          n unique #>   <chr>      <chr>     <int>  <int> #> 1 name       character    87     87 #> 2 height     integer      81     45 #> 3 mass       double       59     38 #> 4 hair_color character    82     12  codebook(starwars, ends_with(\"color\")) #> # A tibble: 3 × 4 #>   variable   type          n unique #>   <chr>      <chr>     <int>  <int> #> 1 hair_color character    82     12 #> 2 skin_color character    87     31 #> 3 eye_color  character    87     15  codebook(starwars, where(is.numeric)) #> # A tibble: 3 × 4 #>   variable   type        n unique #>   <chr>      <chr>   <int>  <int> #> 1 height     integer    81     45 #> 2 mass       double     59     38 #> 3 birth_year double     43     36  codebook(lifeexp) #> # A tibble: 6 × 5 #>   variable  label                    type             n unique #>   <chr>     <chr>                    <chr>        <int>  <int> #> 1 region    Region                   double+label    68      3 #> 2 country   Country                  character       68     68 #> 3 popgrowth Avg. annual % growth     double          68     30 #> 4 lexp      Life expectancy at birth double          68     18 #> 5 gnppc     GNP per capita           double          63     62 #> 6 safewater Safe water               double          40     29  # codebook_detail() is less stable than codebook(). # Some column types may not be recognized. lifeexp %>%  dplyr::select(-region) %>%  codebook_detail() .cl-491b9110{}.cl-49145a58{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-49145a62{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(153, 153, 153, 1.00);background-color:transparent;}.cl-491703e8{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-491703f2{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-4917196e{width:1.017in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4917196f{width:1.108in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171978{width:2.103in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171982{width:1.133in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171983{width:2.14in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171984{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4917198c{width:1.017in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4917198d{width:1.108in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4917198e{width:2.103in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171996{width:1.133in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171997{width:2.14in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171998{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719a0{width:1.017in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719a1{width:1.108in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719aa{width:2.103in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719ab{width:1.133in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719ac{width:2.14in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719ad{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719b4{width:1.017in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719b5{width:1.108in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719be{width:2.103in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719bf{width:1.133in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719c8{width:2.14in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719c9{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719d2{width:1.017in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719d3{width:1.108in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719d4{width:2.103in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719dc{width:1.133in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719dd{width:2.14in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719de{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719e6{width:1.017in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719e7{width:1.108in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719e8{width:2.103in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719f0{width:1.133in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719f1{width:2.14in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719f2{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719fa{width:1.017in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-491719fb{width:1.108in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a04{width:2.103in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a05{width:1.133in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a06{width:2.14in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a07{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a0e{width:1.017in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a0f{width:1.108in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a10{width:2.103in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a18{width:1.133in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a19{width:2.14in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a1a{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a22{width:1.017in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a23{width:1.108in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a24{width:2.103in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a25{width:1.133in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a2c{width:2.14in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a2d{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a2e{width:1.017in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a2f{width:1.108in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a36{width:2.103in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a37{width:1.133in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a38{width:2.14in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a40{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a41{width:1.017in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a42{width:1.108in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a4a{width:2.103in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a4b{width:1.133in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a4c{width:2.14in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a4d{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a54{width:1.017in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a55{width:1.108in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a5e{width:2.103in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a5f{width:1.133in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a60{width:2.14in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-49171a68{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}idnamelabeltypemissingsvaluesnproprow_idcharactercharactercharactercharactercharactercharactercharactercharacterinteger1countryCountrycharacter0 (0.0%)Albania11.5%1Argentina11.5%1Armenia11.5%1Austria11.5%1Azerbaijan11.5%1Belarus11.5%1Belgium11.5%1Bolivia11.5%1Bosnia and Herzegovina11.5%1Brazil11.5%1(...)112popgrowthAvg. annual % growthnumeric0 (0.0%)[-0.5, 3]68223lexpLife expectancy at birthnumeric0 (0.0%)[54, 79]68334gnppcGNP per capitanumeric5 (7.4%)[370, 39980]63445safewaterSafe waternumeric28 (41.2%)[28, 100]4055n: 20"},{"path":"/reference/cut.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut a numeric vector into intervals. — cut","title":"Cut a numeric vector into intervals. — cut","text":"Cut numeric vector intervals.","code":""},{"path":"/reference/cut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut a numeric vector into intervals. — cut","text":"","code":"cut_quantile(x, n = 4, labels = NULL)  cut_length(x, n = 4, labels = NULL)  cut_breaks(x, breaks = NULL, labels = NULL, right = TRUE)"},{"path":"/reference/cut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut a numeric vector into intervals. — cut","text":"x numeric vector. n positive integer. number intervals. labels labels levels resulting category.  default,     labels constructed using \"(,b]\" interval notation.      labels = FALSE, simple integer codes returned instead     factor. breaks either numeric vector two unique cut points     single number (greater equal 2) giving number     intervals x cut. right logical, indicating intervals closed     right (open left) vice versa.","code":""},{"path":"/reference/cut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut a numeric vector into intervals. — cut","text":"Print selected rows data. Return input data frame invisibly.","code":""},{"path":"/reference/cut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut a numeric vector into intervals. — cut","text":"","code":"cut_quantile(1:20) #>  [1] [1,5.75]    [1,5.75]    [1,5.75]    [1,5.75]    [1,5.75]    (5.75,10.5] #>  [7] (5.75,10.5] (5.75,10.5] (5.75,10.5] (5.75,10.5] (10.5,15.2] (10.5,15.2] #> [13] (10.5,15.2] (10.5,15.2] (10.5,15.2] (15.2,20]   (15.2,20]   (15.2,20]   #> [19] (15.2,20]   (15.2,20]   #> Levels: [1,5.75] < (5.75,10.5] < (10.5,15.2] < (15.2,20]  cut_length(1:20) #>  [1] [1,5.75]    [1,5.75]    [1,5.75]    [1,5.75]    [1,5.75]    (5.75,10.5] #>  [7] (5.75,10.5] (5.75,10.5] (5.75,10.5] (5.75,10.5] (10.5,15.2] (10.5,15.2] #> [13] (10.5,15.2] (10.5,15.2] (10.5,15.2] (15.2,20]   (15.2,20]   (15.2,20]   #> [19] (15.2,20]   (15.2,20]   #> Levels: [1,5.75] < (5.75,10.5] < (10.5,15.2] < (15.2,20]  cut_breaks(1:20, breaks = c(5, 15)) #>  [1] [1,5]   [1,5]   [1,5]   [1,5]   [1,5]   (5,15]  (5,15]  (5,15]  (5,15]  #> [10] (5,15]  (5,15]  (5,15]  (5,15]  (5,15]  (5,15]  (15,20] (15,20] (15,20] #> [19] (15,20] (15,20] #> Levels: [1,5] < (5,15] < (15,20]"},{"path":"/reference/import-export.html","id":null,"dir":"Reference","previous_headings":"","what":"Import and export with various data formats — import-export","title":"Import and export with various data formats — import-export","text":"Import export various data formats","code":""},{"path":"/reference/import-export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import and export with various data formats — import-export","text":"","code":"read_data(file, ...)  write_data(data, file, ...)"},{"path":"/reference/import-export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import and export with various data formats — import-export","text":"file file path. ... arguments passed appropriate function. data tibble.","code":""},{"path":"/reference/import-export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import and export with various data formats — import-export","text":"tibble.","code":""},{"path":"/reference/import-export.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import and export with various data formats — import-export","text":"","code":"# Read data if (FALSE) { tb <- read_data(\"data.xlsx\") tb <- read_data(\"data.dta\") }  # Write data if (FALSE) { write_data(tb, \"data.json\") write_data(tb, \"data.ftr\") }"},{"path":"/reference/lifeexp.html","id":null,"dir":"Reference","previous_headings":"","what":"Life expectancy data in 1998 — lifeexp","title":"Life expectancy data in 1998 — lifeexp","text":"Imported example dataset lifeexp.dta Stata. dataset contains variable labels value labels.","code":""},{"path":"/reference/lifeexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Life expectancy data in 1998 — lifeexp","text":"","code":"lifeexp"},{"path":"/reference/lifeexp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Life expectancy data in 1998 — lifeexp","text":"tibble 68 rows 6 variables: region Region (value labels) country Country popgrowth Average annual population growth rate (%) lexp Life expectancy birth (years) gnppc GNP per capita safewater Safe water (%)","code":""},{"path":"/reference/lifeexp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Life expectancy data in 1998 — lifeexp","text":"","code":"lifeexp #> # A tibble: 68 × 6 #>        region country                popgrowth  lexp gnppc safewater #>    <hvn_lbll> <chr>                      <dbl> <dbl> <dbl>     <dbl> #>  1          1 Albania                    1.20     72   810        76 #>  2          1 Armenia                    1.10     74   460        NA #>  3          1 Austria                    0.400    79 26830        NA #>  4          1 Azerbaijan                 1.40     71   480        NA #>  5          1 Belarus                    0.300    68  2180        NA #>  6          1 Belgium                    0.200    78 25380        NA #>  7          1 Bosnia and Herzegovina    -0.5      73    NA        NA #>  8          1 Bulgaria                  -0.400    71  1220        NA #>  9          1 Croatia                   -0.100    73  4620        63 #> 10          1 Czech Republic             0        75  5150        NA #> # ℹ 58 more rows"},{"path":"/reference/na_conversion.html","id":null,"dir":"Reference","previous_headings":"","what":"NA Conversion — na_conversion","title":"NA Conversion — na_conversion","text":"na_if_value() converts value NA. dplyr::na_if(). value_if_na() converts NA value. tidyr::replace_na().","code":""},{"path":"/reference/na_conversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NA Conversion — na_conversion","text":"","code":"na_if_value(.x, .value)  value_if_na(.x, .value)"},{"path":"/reference/na_conversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NA Conversion — na_conversion","text":".x vector. .value value convert NA.","code":""},{"path":"/reference/na_conversion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NA Conversion — na_conversion","text":"Convert NAs easily.","code":""},{"path":"/reference/na_conversion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NA Conversion — na_conversion","text":"","code":"x <- c(1, 2, NA, 4) na_if_value(x, 2) #> [1]  1 NA NA  4  value_if_na(x, 3) #> [1] 1 2 3 4"},{"path":"/reference/names.html","id":null,"dir":"Reference","previous_headings":"","what":"List column names by tidyselect — names","title":"List column names by tidyselect — names","text":"List column names tidyselect","code":""},{"path":"/reference/names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List column names by tidyselect — names","text":"","code":"ds(.data, ...)  ds_as_column(.data, ...)  names_as_column(.data, ...)"},{"path":"/reference/names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List column names by tidyselect — names","text":".data data frame ... <tidy-select> Variables select.","code":""},{"path":"/reference/names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List column names by tidyselect — names","text":"character vector column names.","code":""},{"path":[]},{"path":"/reference/names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List column names by tidyselect — names","text":"","code":"ds(starwars) # equivalent to names(starwars) #>  [1] \"name\"       \"height\"     \"mass\"       \"hair_color\" \"skin_color\" #>  [6] \"eye_color\"  \"birth_year\" \"sex\"        \"gender\"     \"homeworld\"  #> [11] \"species\"    \"films\"      \"vehicles\"   \"starships\"   ds(starwars, homeworld:starships) #> [1] \"homeworld\" \"species\"   \"films\"     \"vehicles\"  \"starships\"  ds_as_column(starwars, ends_with(\"color\")) #> # A tibble: 3 × 1 #>   name       #>   <chr>      #> 1 hair_color #> 2 skin_color #> 3 eye_color   ds_as_column(starwars, where(is.character)) #> # A tibble: 8 × 1 #>   name       #>   <chr>      #> 1 name       #> 2 hair_color #> 3 skin_color #> 4 eye_color  #> 5 sex        #> 6 gender     #> 7 homeworld  #> 8 species      names_as_column(starwars) #> # A tibble: 14 × 1 #>    name       #>    <chr>      #>  1 name       #>  2 height     #>  3 mass       #>  4 hair_color #>  5 skin_color #>  6 eye_color  #>  7 birth_year #>  8 sex        #>  9 gender     #> 10 homeworld  #> 11 species    #> 12 films      #> 13 vehicles   #> 14 starships   names_as_column(starwars, ends_with(\"color\")) #> # A tibble: 3 × 1 #>   name       #>   <chr>      #> 1 hair_color #> 2 skin_color #> 3 eye_color   names_as_column(starwars, where(is.character)) #> # A tibble: 8 × 1 #>   name       #>   <chr>      #> 1 name       #> 2 hair_color #> 3 skin_color #> 4 eye_color  #> 5 sex        #> 6 gender     #> 7 homeworld  #> 8 species"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/regress.html","id":null,"dir":"Reference","previous_headings":"","what":"Directly obtain the regression results — regress","title":"Directly obtain the regression results — regress","text":"functions wrappers broom package directly obtain regression results. naming convention regress_* raw formula tidy_* model object. regress() returns regression results list. regress_coef() returns coefficients. regress_stat() returns model statistics. regress_data() returns augmented data.","code":""},{"path":"/reference/regress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Directly obtain the regression results — regress","text":"","code":"regress(.data, formula, model = \"lm\", digit = integer(0), format = \"%.3f\")  regress_coef(   .data,   formula,   model = \"lm\",   digit = integer(0),   format = \"%.3f\" )  regress_stat(.data, formula, model = \"lm\")  regress_data(.data, formula, model = \"lm\")"},{"path":"/reference/regress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Directly obtain the regression results — regress","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). formula formula specifying model. model character string specifying model used. digit positive integer specifying number digits displayed. format character string specifying format coefficients. default %.3f, means three decimal places.","code":""},{"path":"/reference/regress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Directly obtain the regression results — regress","text":"Return regression results list tibble.","code":""},{"path":[]},{"path":"/reference/regress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Directly obtain the regression results — regress","text":"","code":"regress(mtcars, mpg ~ wt + hp) #> $coef #> # A tibble: 3 × 7 #>   term        coef                 estimate std.error statistic  p.value star  #>   <chr>       <chr>                   <dbl>     <dbl>     <dbl>    <dbl> <chr> #> 1 (Intercept) \"37.227***\\n(1.599)\"  37.2      1.60        23.3  2.57e-20 ***   #> 2 wt          \"-3.878***\\n(0.633)\"  -3.88     0.633       -6.13 1.12e- 6 ***   #> 3 hp          \"-0.032**\\n(0.009)\"   -0.0318   0.00903     -3.52 1.45e- 3 **    #>  #> $stat #> # A tibble: 1 × 12 #>   r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC   BIC #>       <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>  <dbl> <dbl> <dbl> #> 1     0.827         0.815  2.59      69.2 9.11e-12     2  -74.3  157.  163. #> # ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int> #>  #> $data #> # A tibble: 32 × 10 #>    .rownames     mpg    wt    hp .fitted .resid   .hat .sigma .cooksd .std.resid #>    <chr>       <dbl> <dbl> <dbl>   <dbl>  <dbl>  <dbl>  <dbl>   <dbl>      <dbl> #>  1 Mazda RX4    21    2.62   110    23.6 -2.57  0.0443   2.59 1.59e-2    -1.01   #>  2 Mazda RX4 …  21    2.88   110    22.6 -1.58  0.0405   2.62 5.46e-3    -0.623  #>  3 Datsun 710   22.8  2.32    93    25.3 -2.48  0.0602   2.59 2.07e-2    -0.985  #>  4 Hornet 4 D…  21.4  3.22   110    21.3  0.135 0.0475   2.64 4.72e-5     0.0533 #>  5 Hornet Spo…  18.7  3.44   175    18.3  0.373 0.0369   2.64 2.74e-4     0.146  #>  6 Valiant      18.1  3.46   105    20.5 -2.37  0.0672   2.60 2.16e-2    -0.948  #>  7 Duster 360   14.3  3.57   245    15.6 -1.30  0.117    2.63 1.26e-2    -0.533  #>  8 Merc 240D    24.4  3.19    62    22.9  1.51  0.116    2.62 1.68e-2     0.620  #>  9 Merc 230     22.8  3.15    95    22.0  0.806 0.0600   2.63 2.19e-3     0.321  #> 10 Merc 280     19.2  3.44   123    20.0 -0.779 0.0469   2.63 1.55e-3    -0.308  #> # ℹ 22 more rows #>  regress_coef(mtcars, mpg ~ wt + hp) #> # A tibble: 3 × 7 #>   term        coef                 estimate std.error statistic  p.value star  #>   <chr>       <chr>                   <dbl>     <dbl>     <dbl>    <dbl> <chr> #> 1 (Intercept) \"37.227***\\n(1.599)\"  37.2      1.60        23.3  2.57e-20 ***   #> 2 wt          \"-3.878***\\n(0.633)\"  -3.88     0.633       -6.13 1.12e- 6 ***   #> 3 hp          \"-0.032**\\n(0.009)\"   -0.0318   0.00903     -3.52 1.45e- 3 **     mtcars %>%   dplyr::mutate(mpg20 = mpg > 20) %>%   regress(mpg20 ~ wt + hp, model = \"logit\") #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> $coef #> # A tibble: 3 × 7 #>   term        coef                    estimate std.error statistic p.value star  #>   <chr>       <chr>                      <dbl>     <dbl>     <dbl>   <dbl> <chr> #> 1 (Intercept) \"894.228\\n(365884.162)\"   894.     365884.   0.00244   0.998 \"\"    #> 2 wt          \"-202.865\\n(84688.218)\"  -203.      84688.  -0.00240   0.998 \"\"    #> 3 hp          \"-2.021\\n(858.062)\"        -2.02      858.  -0.00236   0.998 \"\"    #>  #> $stat #> # A tibble: 1 × 8 #>   null.deviance df.null   logLik   AIC   BIC     deviance df.residual  nobs #>           <dbl>   <int>    <dbl> <dbl> <dbl>        <dbl>       <int> <int> #> 1          43.9      31 -5.58e-9  6.00  10.4 0.0000000112          29    32 #>  #> $data #> # A tibble: 32 × 10 #>    .rownames       mpg20    wt    hp .fitted   .resid    .hat    .sigma  .cooksd #>    <chr>           <lgl> <dbl> <dbl>   <dbl>    <dbl>   <dbl>     <dbl>    <dbl> #>  1 Mazda RX4       TRUE   2.62   110   140.   2.11e-8 7.71e-7   2.00e-5 5.70e-23 #>  2 Mazda RX4 Wag   TRUE   2.88   110    88.7  2.11e-8 3.15e-7   2.00e-5 2.33e-23 #>  3 Datsun 710      TRUE   2.32    93   236.   2.11e-8 2.10e-6   2.00e-5 1.55e-22 #>  4 Hornet 4 Drive  TRUE   3.22   110    19.7  7.48e-5 1.00e+0 NaN       3.12e- 1 #>  5 Hornet Sportab… FALSE  3.44   175  -157.  -2.11e-8 9.55e-7   2.00e-5 7.07e-23 #>  6 Valiant         FALSE  3.46   105   -19.9 -6.74e-5 1.00e+0 NaN       3.53e- 1 #>  7 Duster 360      FALSE  3.57   245  -325.  -2.11e-8 4.06e-6   2.00e-5 3.00e-22 #>  8 Merc 240D       TRUE   3.19    62   122.   2.11e-8 5.89e-7   2.00e-5 4.36e-23 #>  9 Merc 230        TRUE   3.15    95    63.2  2.11e-8 1.64e-7   2.00e-5 1.21e-23 #> 10 Merc 280        FALSE  3.44   123   -52.2 -2.11e-8 1.15e-7   2.00e-5 8.48e-24 #> # ℹ 22 more rows #> # ℹ 1 more variable: .std.resid <dbl> #>"},{"path":"/reference/row_egen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a variable based on row-wise operations. — row_egen","title":"Generate a variable based on row-wise operations. — row_egen","text":"row_mean() - Calculate row-wise mean selected varaibles. row_sum() - Calculate row-wise sum selected varaibles. row_max() - Calculate row-wise maximum selected varaibles. row_min() - Calculate row-wise minimum selected varaibles. row_median() - Calculate row-wise median selected varaibles. row_var() - Calculate row-wise variance selected varaibles. row_sd() - Calculate row-wise standard deviation selected varaibles. row_unique() - Calculate row-wise number unique values selected varaibles. row_miss() - Calculate row-wise number missing values selected varaibles. row_non_miss() - Calculate row-wise number non-missing values selected varaibles.","code":""},{"path":"/reference/row_egen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a variable based on row-wise operations. — row_egen","text":"","code":"row_mean(...)  row_sum(...)  row_max(...)  row_miss(...)  row_non_miss(...)  row_min(...)  row_median(...)  row_var(...)  row_sd(...)  row_unique(...)"},{"path":"/reference/row_egen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a variable based on row-wise operations. — row_egen","text":"... data frame tibble, <tidy-select> within mutate() function.","code":""},{"path":"/reference/row_egen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a variable based on row-wise operations. — row_egen","text":"numeric vector.","code":""},{"path":"/reference/row_egen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a variable based on row-wise operations. — row_egen","text":"","code":"tb <- tibble::tibble(   x = 1:10,   y = 11:20,   z = 21:30 )  row_mean(tb) #> # A tibble: 10 × 1 #>    value #>    <dbl> #>  1    11 #>  2    12 #>  3    13 #>  4    14 #>  5    15 #>  6    16 #>  7    17 #>  8    18 #>  9    19 #> 10    20  row_sum(tb) #> # A tibble: 10 × 1 #>    value #>    <dbl> #>  1    33 #>  2    36 #>  3    39 #>  4    42 #>  5    45 #>  6    48 #>  7    51 #>  8    54 #>  9    57 #> 10    60  row_non_miss(tb) #> # A tibble: 10 × 1 #>    value #>    <dbl> #>  1     3 #>  2     3 #>  3     3 #>  4     3 #>  5     3 #>  6     3 #>  7     3 #>  8     3 #>  9     3 #> 10     3  tb %>%   dplyr::mutate(     mean = row_mean(x, y),     sum = row_sum(x, y)   ) #> # A tibble: 10 × 5 #>        x     y     z  mean   sum #>    <int> <int> <int> <dbl> <dbl> #>  1     1    11    21     6    12 #>  2     2    12    22     7    14 #>  3     3    13    23     8    16 #>  4     4    14    24     9    18 #>  5     5    15    25    10    20 #>  6     6    16    26    11    22 #>  7     7    17    27    12    24 #>  8     8    18    28    13    26 #>  9     9    19    29    14    28 #> 10    10    20    30    15    30"},{"path":"/reference/s_ggsave.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly save a ggplot to a file — s_ggsave","title":"Quickly save a ggplot to a file — s_ggsave","text":"Quickly save ggplot file","code":""},{"path":"/reference/s_ggsave.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly save a ggplot to a file — s_ggsave","text":"","code":"s_ggsave(   plot = ggplot2::last_plot(),   filename,   path = \"wd\",   width = 7,   height = 5,   units = \"in\",   dpi = 300,   bg = \"white\" )"},{"path":"/reference/s_ggsave.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly save a ggplot to a file — s_ggsave","text":"plot ggplot object filename character string file name path character string file path. default, working directory. width, height Plot size units expressed units argument. supplied, uses size current graphics device. units One following units width height arguments expressed: \"\", \"cm\", \"mm\" \"px\". dpi Plot resolution. Also accepts string input: \"retina\" (320), \"print\" (300), \"screen\" (72). Applies raster output types. bg Background colour. NULL, uses plot.background fill value plot theme.","code":""},{"path":"/reference/s_ggsave.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly save a ggplot to a file — s_ggsave","text":"","code":"gg <- s_plot(mtcars, mpg, wt) if (FALSE) { s_ggsave(gg, \"plot.png\") }  # Alternatively, you can use the pipe operator if (FALSE) { mtcars %>%   s_plot(mpg, wt) %>%   s_ggsave(\"plot.png\") }"},{"path":"/reference/s_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidyselect columns in stata style — s_match","title":"Tidyselect columns in stata style — s_match","text":"s_match() simpler version matches() <tidy-select>. designed select columns Stata-like style. matches(), s_match() must used within selecting function, ds() dplyr::across().","code":""},{"path":"/reference/s_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidyselect columns in stata style — s_match","text":"","code":"s_match(string, ignore.case = TRUE, vars = NULL)"},{"path":"/reference/s_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidyselect columns in stata style — s_match","text":"string character vector column names like selecting varlist Stata keep command. ignore.case TRUE, default, ignores case matching names. vars character vector variable names. supplied, variables taken current selection context (established functions like select() pivot_longer()).","code":""},{"path":"/reference/s_match.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tidyselect columns in stata style — s_match","text":"* matches zero characters. ~ matches one characters. ? matches one character. [-h] matches character range h. [1-12] matches number range 1 12. var1-var5 used select range variables. Use var1:var5 s_match() instead.","code":""},{"path":"/reference/s_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidyselect columns in stata style — s_match","text":"","code":"tb <- paste0(\"x\", 1:15) %>%   tibble::as_tibble() %>%   tidyr::pivot_wider(names_from = value) tb #> # A tibble: 1 × 15 #>   x1    x2    x3    x4    x5    x6    x7    x8    x9    x10   x11   x12   x13   #>   <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> #> 1 x1    x2    x3    x4    x5    x6    x7    x8    x9    x10   x11   x12   x13   #> # ℹ 2 more variables: x14 <chr>, x15 <chr>  # List variable names by ds() ds(tb) #>  [1] \"x1\"  \"x2\"  \"x3\"  \"x4\"  \"x5\"  \"x6\"  \"x7\"  \"x8\"  \"x9\"  \"x10\" \"x11\" \"x12\" #> [13] \"x13\" \"x14\" \"x15\"  tb %>%   ds(s_match(\"x1*\")) #> [1] \"x1\"  \"x10\" \"x11\" \"x12\" \"x13\" \"x14\" \"x15\"  tb %>%   ds(s_match(\"x1~\")) #> [1] \"x10\" \"x11\" \"x12\" \"x13\" \"x14\" \"x15\"  tb %>%   ds(s_match(\"*5\")) #> [1] \"x5\"  \"x15\"  tb %>%   ds(s_match(\"?5\")) #> [1] \"x5\"  tb %>%   ds(s_match(\"x[9-15]\")) #> [1] \"x9\"  \"x10\" \"x11\" \"x12\" \"x13\" \"x14\" \"x15\"  if (FALSE) { tb %>%   ds(s_match(\"x1-x5\")) }  tb %>%   ds(x1:x5) #> [1] \"x1\" \"x2\" \"x3\" \"x4\" \"x5\""},{"path":"/reference/s_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick plot — s_plot","title":"Quick plot — s_plot","text":"Quick plot","code":""},{"path":"/reference/s_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick plot — s_plot","text":"","code":"s_plot(data, x, y, ..., geom = \"auto\", main, xlab, ylab, asp)"},{"path":"/reference/s_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick plot — s_plot","text":"data data frame tibble. x column name. y column name (optional). ... arguments passed qplot() function. geom Character vector specifying geom(s) draw. Defaults \"point\" x y specified, \"histogram\" x specified. main, xlab, ylab Character vector (expression) giving plot title, x axis label, y axis label respectively. asp y/x aspect ratio","code":""},{"path":"/reference/s_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Enhanced select() with data-masking — s_select","title":"Enhanced select() with data-masking — s_select","text":"Enhanced select() data-masking","code":""},{"path":"/reference/s_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enhanced select() with data-masking — s_select","text":"","code":"s_select(.data, ...)"},{"path":"/reference/s_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enhanced select() with data-masking — s_select","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). ... <tidy-select> <data-masking> Variables tabulate. tidyselect (e.g., starts_with()) data masking (e.g., x_sq = x^2) supported. See examples .","code":""},{"path":"/reference/s_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enhanced select() with data-masking — s_select","text":"tibble","code":""},{"path":"/reference/s_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enhanced select() with data-masking — s_select","text":"","code":"starwars %>%   s_select() #> # A tibble: 87 × 14 #>    name     height  mass hair_color skin_color eye_color birth_year sex   gender #>    <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr>  #>  1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu… #>  2 C-3PO       167    75 NA         gold       yellow         112   none  mascu… #>  3 R2-D2        96    32 NA         white, bl… red             33   none  mascu… #>  4 Darth V…    202   136 none       white      yellow          41.9 male  mascu… #>  5 Leia Or…    150    49 brown      light      brown           19   fema… femin… #>  6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu… #>  7 Beru Wh…    165    75 brown      light      blue            47   fema… femin… #>  8 R5-D4        97    32 NA         white, red red             NA   none  mascu… #>  9 Biggs D…    183    84 black      light      brown           24   male  mascu… #> 10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu… #> # ℹ 77 more rows #> # ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>, #> #   vehicles <list>, starships <list> starwars %>%   s_select(name, height) #> # A tibble: 87 × 2 #>    name               height #>    <chr>               <int> #>  1 Luke Skywalker        172 #>  2 C-3PO                 167 #>  3 R2-D2                  96 #>  4 Darth Vader           202 #>  5 Leia Organa           150 #>  6 Owen Lars             178 #>  7 Beru Whitesun lars    165 #>  8 R5-D4                  97 #>  9 Biggs Darklighter     183 #> 10 Obi-Wan Kenobi        182 #> # ℹ 77 more rows if (FALSE) { starwars %>%   dplyr::select(height > 50) } starwars %>%   s_select(height > 50) #> # A tibble: 87 × 1 #>    `height > 50` #>    <lgl>         #>  1 TRUE          #>  2 TRUE          #>  3 TRUE          #>  4 TRUE          #>  5 TRUE          #>  6 TRUE          #>  7 TRUE          #>  8 TRUE          #>  9 TRUE          #> 10 TRUE          #> # ℹ 77 more rows"},{"path":"/reference/s_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Time spent on a function — s_time","title":"Time spent on a function — s_time","text":"Time spent function","code":""},{"path":"/reference/s_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time spent on a function — s_time","text":"","code":"s_time(.x)"},{"path":"/reference/s_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time spent on a function — s_time","text":".x function","code":""},{"path":"/reference/s_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time spent on a function — s_time","text":"function output","code":""},{"path":"/reference/s_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time spent on a function — s_time","text":"","code":"x <- seq_len(1e6) mean(x) %>% s_time() #> Time spent: 0.007 secs"},{"path":"/reference/s_try.html","id":null,"dir":"Reference","previous_headings":"","what":"Try a function and return a logical — s_try","title":"Try a function and return a logical — s_try","text":"function tries evaluate function, function throws error, returns FALSE. Otherwise, returns TRUE.","code":""},{"path":"/reference/s_try.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try a function and return a logical — s_try","text":"","code":"s_try(.fn)"},{"path":"/reference/s_try.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try a function and return a logical — s_try","text":".fn function call.","code":""},{"path":"/reference/s_try.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Try a function and return a logical — s_try","text":"logical value.","code":""},{"path":"/reference/s_try.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Try a function and return a logical — s_try","text":"","code":"s_try(mean(1:10)) #> [1] TRUE  # This gives a warning, but it is still working, so s_try() returns TRUE s_try(mean(letters[1:10])) #> Warning: argument is not numeric or logical: returning NA #> [1] TRUE  # This throws an error, so s_try() returns FALSE s_try(means(1:10)) #> [1] FALSE"},{"path":"/reference/s_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Know the type of an object. — s_type","title":"Know the type of an object. — s_type","text":"Know type object.","code":""},{"path":"/reference/s_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Know the type of an object. — s_type","text":"","code":"s_type(.x, .abbr = FALSE)  s_unit(.x)"},{"path":"/reference/s_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Know the type of an object. — s_type","text":".x object. .abbr logical. TRUE, abbreviation type returned.","code":""},{"path":"/reference/s_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Know the type of an object. — s_type","text":"character.","code":""},{"path":"/reference/s_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Know the type of an object. — s_type","text":"","code":"s_type(1:10) #> [1] \"integer\" s_type(letters) #> [1] \"character\""},{"path":"/reference/set_seed.html","id":null,"dir":"Reference","previous_headings":"","what":"Set seeds with pipeline. — set_seed","title":"Set seeds with pipeline. — set_seed","text":"Attach seed specific function.","code":""},{"path":"/reference/set_seed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set seeds with pipeline. — set_seed","text":"","code":"set_seed(.fn, seed)"},{"path":"/reference/set_seed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set seeds with pipeline. — set_seed","text":".fn function call. seed integer reproducibility.","code":""},{"path":"/reference/set_seed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set seeds with pipeline. — set_seed","text":"Return function result seed set.","code":""},{"path":"/reference/set_seed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set seeds with pipeline. — set_seed","text":"","code":"sample(1:10, 8) %>%    set_seed(123) #> [1]  3 10  2  8  6  9  1  7  # When we re-run the code, we will get the same result. sample(1:10, 8) %>%  set_seed(123) #> [1]  3 10  2  8  6  9  1  7"},{"path":"/reference/special-print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a long tibble with selected rows — special-print","title":"Print a long tibble with selected rows — special-print","text":"print_headtail() - Print head tail rows data. print_interval() - Print selected rows (almost) equal intervals. slice_headtail() - Return head tail rows data. slice_interval() - Return selected rows (almost) equal intervals.","code":""},{"path":"/reference/special-print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a long tibble with selected rows — special-print","text":"","code":"print_headtail(   .data,   n = 10,   width = NULL,   ...,   max_extra_cols = NULL,   max_footer_lines = NULL )  print_interval(   .data,   n = 10,   width = NULL,   ...,   max_extra_cols = NULL,   max_footer_lines = NULL )  slice_headtail(.data, n = 10)  slice_interval(.data, n = 10)"},{"path":"/reference/special-print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a long tibble with selected rows — special-print","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). n positive integer. number rows show head tail. width positive integer. width printed tibble. ... Passed tbl_format_setup(). max_extra_cols Number extra columns print abbreviated information , width small entire tibble. NULL, max_extra_cols option used. previously defined n_extra argument soft-deprecated. max_footer_lines Maximum number footer lines. NULL, max_footer_lines option used.","code":""},{"path":"/reference/special-print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a long tibble with selected rows — special-print","text":"Print selected rows data. Return input data frame invisibly.","code":""},{"path":"/reference/special-print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a long tibble with selected rows — special-print","text":"","code":"print_headtail(starwars) #> # A tibble: 87 × 14 #>    name     height  mass hair_color skin_color eye_color birth_year sex   gender #>    <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr>  #>  1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu… #>  2 C-3PO       167    75 NA         gold       yellow         112   none  mascu… #>  3 R2-D2        96    32 NA         white, bl… red             33   none  mascu… #>  4 Darth V…    202   136 none       white      yellow          41.9 male  mascu… #>  5 Leia Or…    150    49 brown      light      brown           19   fema… femin… #> 83 Rey          NA    NA brown      light      hazel           NA   fema… femin… #> 84 Poe Dam…     NA    NA brown      light      brown           NA   male  mascu… #> 85 BB8          NA    NA none       none       black           NA   none  mascu… #> 86 Captain…     NA    NA unknown    unknown    unknown         NA   NA    NA     #> 87 Padmé A…    165    45 brown      light      brown           46   fema… femin… #> # ℹ 77 more rows in the middle #> # ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>, #> #   vehicles <list>, starships <list> #> # ℹ Use `print_headtail(n = ...)` to see more rows  print_interval(starwars) #> # A tibble: 87 × 14 #>    name     height  mass hair_color skin_color eye_color birth_year sex   gender #>    <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr>  #>  1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu… #> 11 Anakin …    188    84 blond      fair       blue            41.9 male  mascu… #> 20 Palpati…    170    75 grey       pale       yellow          82   male  mascu… #> 30 Nien Nu…    160    68 none       grey       black           NA   male  mascu… #> 39 Sebulba     112    40 none       grey, red  orange          NA   male  mascu… #> 49 Ki-Adi-…    198    82 white      pale       yellow          92   male  mascu… #> 58 Cordé       157    NA brown      light      brown           NA   fema… femin… #> 68 Dexter …    198   102 none       brown      yellow          NA   male  mascu… #> 77 Grievous    216   159 none       brown, wh… green, y…       NA   male  mascu… #> 87 Padmé A…    165    45 brown      light      brown           46   fema… femin… #> # ℹ 77 more rows between the intervals #> # ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>, #> #   vehicles <list>, starships <list> #> # ℹ Use `print_interval(n = ...)` to see more rows  slice_headtail(starwars) #> # A tibble: 10 × 14 #>    name     height  mass hair_color skin_color eye_color birth_year sex   gender #>    <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr>  #>  1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu… #>  2 C-3PO       167    75 NA         gold       yellow         112   none  mascu… #>  3 R2-D2        96    32 NA         white, bl… red             33   none  mascu… #>  4 Darth V…    202   136 none       white      yellow          41.9 male  mascu… #>  5 Leia Or…    150    49 brown      light      brown           19   fema… femin… #>  6 Rey          NA    NA brown      light      hazel           NA   fema… femin… #>  7 Poe Dam…     NA    NA brown      light      brown           NA   male  mascu… #>  8 BB8          NA    NA none       none       black           NA   none  mascu… #>  9 Captain…     NA    NA unknown    unknown    unknown         NA   NA    NA     #> 10 Padmé A…    165    45 brown      light      brown           46   fema… femin… #> # ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>, #> #   vehicles <list>, starships <list>  slice_interval(starwars) #> # A tibble: 10 × 14 #>    name     height  mass hair_color skin_color eye_color birth_year sex   gender #>    <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr>  #>  1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu… #>  2 Anakin …    188    84 blond      fair       blue            41.9 male  mascu… #>  3 Palpati…    170    75 grey       pale       yellow          82   male  mascu… #>  4 Nien Nu…    160    68 none       grey       black           NA   male  mascu… #>  5 Sebulba     112    40 none       grey, red  orange          NA   male  mascu… #>  6 Ki-Adi-…    198    82 white      pale       yellow          92   male  mascu… #>  7 Cordé       157    NA brown      light      brown           NA   fema… femin… #>  8 Dexter …    198   102 none       brown      yellow          NA   male  mascu… #>  9 Grievous    216   159 none       brown, wh… green, y…       NA   male  mascu… #> 10 Padmé A…    165    45 brown      light      brown           46   fema… femin… #> # ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>, #> #   vehicles <list>, starships <list>"},{"path":"/reference/starwars.html","id":null,"dir":"Reference","previous_headings":"","what":"Starwars characters — starwars","title":"Starwars characters — starwars","text":"original data, SWAPI, Star Wars API, https://swapi.py4e.com/, revised reflect additional research gender sex determinations characters.","code":""},{"path":"/reference/starwars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Starwars characters — starwars","text":"","code":"starwars"},{"path":"/reference/starwars.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Starwars characters — starwars","text":"tibble 87 rows 14 variables: name Name character height Height (cm) mass Weight (kg) hair_color,skin_color,eye_color Hair, skin, eye colors birth_year Year born (BBY = Battle Yavin) sex biological sex character, namely male, female, hermaphroditic, none (case Droids). gender gender role gender identity character determined personality way programmed (case Droids). homeworld Name homeworld species Name species films List films character appeared vehicles List vehicles character piloted starships List starships character piloted","code":""},{"path":"/reference/starwars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Starwars characters — starwars","text":"","code":"starwars #> # A tibble: 87 × 14 #>    name     height  mass hair_color skin_color eye_color birth_year sex   gender #>    <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr>  #>  1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu… #>  2 C-3PO       167    75 NA         gold       yellow         112   none  mascu… #>  3 R2-D2        96    32 NA         white, bl… red             33   none  mascu… #>  4 Darth V…    202   136 none       white      yellow          41.9 male  mascu… #>  5 Leia Or…    150    49 brown      light      brown           19   fema… femin… #>  6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu… #>  7 Beru Wh…    165    75 brown      light      blue            47   fema… femin… #>  8 R5-D4        97    32 NA         white, red red             NA   none  mascu… #>  9 Biggs D…    183    84 black      light      brown           24   male  mascu… #> 10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu… #> # ℹ 77 more rows #> # ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>, #> #   vehicles <list>, starships <list>"},{"path":"/reference/stat.html","id":null,"dir":"Reference","previous_headings":"","what":"Skewness and kurtosis — stat","title":"Skewness and kurtosis — stat","text":"Calculate skewness kurtosis","code":""},{"path":"/reference/stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skewness and kurtosis — stat","text":"","code":"skew(x, n)  kurtosis(x, n)"},{"path":"/reference/stat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skewness and kurtosis — stat","text":"x numeric vector n number observations","code":""},{"path":"/reference/stat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skewness and kurtosis — stat","text":"numeric value","code":""},{"path":"/reference/statart-package.html","id":null,"dir":"Reference","previous_headings":"","what":"statart: Tidy Functions with Stata Functionality — statart-package","title":"statart: Tidy Functions with Stata Functionality — statart-package","text":"learn statart, start vignettes: browseVignettes(package = \"statart\") learn statart, start vignettes: browseVignettes(package = \"statart\")","code":""},{"path":[]},{"path":"/reference/statart-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"statart: Tidy Functions with Stata Functionality — statart-package","text":"Maintainer: Minghong Shen mhshenaa@connect.ust.hk","code":""},{"path":"/reference/summ.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise columns — summ","title":"Summarise columns — summ","text":"Enhanced summarise().","code":""},{"path":"/reference/summ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise columns — summ","text":"","code":"summ(   .data,   ...,   .by = NULL,   .keep_all = FALSE,   .detail = FALSE,   .stat = character(0) )  tabstat(   .data,   ...,   .by = NULL,   .keep_all = FALSE,   .detail = FALSE,   .stat = \"mean\" )"},{"path":"/reference/summ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise columns — summ","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). ... <tidy-select> <data-masking> Variables tabulate. tidyselect (e.g., starts_with()) data masking (e.g., x_sq = x^2) supported. See examples . . <tidy-select> Optionally, selection columns group just operation, functioning alternative group_by(). details examples, see ?dplyr_by. .keep_all logical. TRUE, variables kept. .detail logical. TRUE, detailed summary returned. .stat character vector. specified, listed statistics returned.","code":""},{"path":"/reference/summ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise columns — summ","text":"tibble","code":""},{"path":"/reference/summ.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise columns — summ","text":"","code":"summ(lifeexp) #> Warning: country is non-numeric and thus removed. #> Warning: region is a labelled variable (*). #> # A tibble: 5 × 8 #>   name      type        n unique   min     mean        sd   max #>   <chr>     <chr>   <dbl>  <dbl> <dbl>    <dbl>     <dbl> <dbl> #> 1 *region   dbl+lbl    68      3   1      1.5       0.743     3 #> 2 popgrowth dbl        68     30  -0.5    0.972     0.931     3 #> 3 lexp      dbl        68     18  54     72.3       4.72     79 #> 4 gnppc     dbl        63     62 370   8675.    10635.    39980 #> 5 safewater dbl        40     29  28     76.1      17.9     100  summ(lifeexp, .by = region) #> Warning: country is non-numeric and thus removed. #> # A tibble: 12 × 9 #>        region name      type      n unique      min      mean        sd      max #>    <hvn_lbll> <chr>     <chr> <dbl>  <dbl>    <dbl>     <dbl>     <dbl>    <dbl> #>  1          1 popgrowth dbl      44     20   -0.5       0.525     0.718     2.80 #>  2          1 lexp      dbl      44     15   65        73.1       4.15     79    #>  3          1 gnppc     dbl      41     40  370     10738.    11794.    39980    #>  4          1 safewater dbl      17     12   55        79.8      18.6     100    #>  5          2 popgrowth dbl      14     10    0.700     1.69      0.749     3    #>  6          2 lexp      dbl      14     12   54        71.2       6.41     79    #>  7          2 gnppc     dbl      12     12  410      5817.     8929.    29240    #>  8          2 safewater dbl      13     13   28        75        19.2      99    #>  9          3 popgrowth dbl      10      8    0.700     1.93      0.617     2.90 #> 10          3 lexp      dbl      10      7   62        70.3       3.83     75    #> 11          3 gnppc     dbl      10     10 1010      3645      2255.     8030    #> 12          3 safewater dbl      10     10   39        71.2      15.0      89     tabstat(lifeexp, .by = region) #> Warning: country is non-numeric and thus removed. #> # A tibble: 12 × 4 #>        region name      type       mean #>    <hvn_lbll> <chr>     <chr>     <dbl> #>  1          1 popgrowth dbl       0.525 #>  2          1 lexp      dbl      73.1   #>  3          1 gnppc     dbl   10738.    #>  4          1 safewater dbl      79.8   #>  5          2 popgrowth dbl       1.69  #>  6          2 lexp      dbl      71.2   #>  7          2 gnppc     dbl    5817.    #>  8          2 safewater dbl      75     #>  9          3 popgrowth dbl       1.93  #> 10          3 lexp      dbl      70.3   #> 11          3 gnppc     dbl    3645     #> 12          3 safewater dbl      71.2    lifeexp %>%   summ(     dplyr::where(is.numeric),     .by = region,     .stat = c(\"mean\", \"sd\")   ) #> # A tibble: 12 × 5 #>        region name      type       mean        sd #>    <hvn_lbll> <chr>     <chr>     <dbl>     <dbl> #>  1          1 popgrowth dbl       0.525     0.718 #>  2          1 lexp      dbl      73.1       4.15  #>  3          1 gnppc     dbl   10738.    11794.    #>  4          1 safewater dbl      79.8      18.6   #>  5          2 popgrowth dbl       1.69      0.749 #>  6          2 lexp      dbl      71.2       6.41  #>  7          2 gnppc     dbl    5817.     8929.    #>  8          2 safewater dbl      75        19.2   #>  9          3 popgrowth dbl       1.93      0.617 #> 10          3 lexp      dbl      70.3       3.83  #> 11          3 gnppc     dbl    3645      2255.    #> 12          3 safewater dbl      71.2      15.0"},{"path":"/reference/tab.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulate columns — tab","title":"Tabulate columns — tab","text":"Enhanced count(). tab() - Tabulates variable(s) simultaneously, similar count(). tab1() - Tabulates variable(s) one one. tab2() - Cross-tabulates two variables. fre() - Adds “Total” row(s) output tab(). fre1() - Adds “Total” row(s) output tab1(). fre2() - Adds “Total” row “total” column output tab2(). tab() functions suitable subsequent data analysis, fre() functions return flextables default suitable reporting. output tibble many rows, consider using print() print_headtail() display output.","code":""},{"path":"/reference/tab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulate columns — tab","text":"","code":"tab(.data, ..., .by = NULL, .desc = FALSE)  tab1(.data, ..., .by = NULL, .desc = FALSE, .type = c(\"list\", \"tibble\"))  tab2(.data, ..., .flip = FALSE)  fre(.data, ..., .by = NULL, .desc = FALSE, .type = c(\"flextable\", \"tibble\"))  fre1(   .data,   ...,   .by = NULL,   .desc = FALSE,   .type = c(\"flextable\", \"list\", \"tibble\") )  fre2(.data, ..., .flip = FALSE, .type = c(\"flextable\", \"tibble\"))"},{"path":"/reference/tab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulate columns — tab","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). ... <tidy-select> <data-masking> Variables tabulate. tidyselect (e.g., starts_with()) data masking (e.g., x_sq = x^2) supported. See examples . . <tidy-select> Optionally, selection columns group just operation, functioning alternative group_by(). details examples, see ?dplyr_by. .desc TRUE, show largest groups top. .type Output type. tab1() returns list default, fre() functions return flextables default. .flip TRUE, transpose output tibble.","code":""},{"path":"/reference/tab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabulate columns — tab","text":"tibble, list tibbles, flextable.","code":""},{"path":"/reference/tab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulate columns — tab","text":"sex n percent cum valid valid_cum character integer numeric numeric numeric numeric female 16 18.4 18.4 19.3 19.3 hermaphroditic 1 1.1 19.5 1.2 20.5 male 60 69.0 88.5 72.3 92.8 none 6 6.9 95.4 7.2 100.0 Valid Total 83 95.4  100.0  NA 4 4.6 100.0   Total 87 100.0    n: 7 sex n percent cum valid valid_cum character integer numeric numeric numeric numeric male 60 69.0 69.0 72.3 72.3 female 16 18.4 87.4 19.3 91.6 none 6 6.9 94.3 7.2 98.8 hermaphroditic 1 1.1 95.4 1.2 100.0 Valid Total 83 95.4  100.0  NA 4 4.6 100.0   Total 87 100.0    n: 7 variable value n percent cum valid valid_cum character character integer numeric numeric numeric numeric hair_color auburn 1 1.1 1.1 1.2 1.2 hair_color auburn, grey 1 1.1 2.3 1.2 2.4 hair_color auburn, white 1 1.1 3.4 1.2 3.7 hair_color black 13 14.9 18.4 15.9 19.5 hair_color blond 3 3.4 21.8 3.7 23.2 hair_color blonde 1 1.1 23.0 1.2 24.4 hair_color brown 18 20.7 43.7 22.0 46.3 hair_color brown, grey 1 1.1 44.8 1.2 47.6 hair_color grey 1 1.1 46.0 1.2 48.8 hair_color none 37 42.5 88.5 45.1 93.9 hair_color unknown 1 1.1 89.7 1.2 95.1 hair_color white 4 4.6 94.3 4.9 100.0 hair_color Valid Total 82 94.3  100.0  hair_color NA 5 5.7 100.0   hair_color Total 87 100.0           skin_color blue 2 2.3 2.3 2.3 2.3 skin_color blue, grey 2 2.3 4.6 2.3 4.6 skin_color brown 4 4.6 9.2 4.6 9.2 skin_color brown mottle 1 1.1 10.3 1.1 10.3 skin_color brown, white 1 1.1 11.5 1.1 11.5 skin_color dark 6 6.9 18.4 6.9 18.4 skin_color fair 17 19.5 37.9 19.5 37.9 skin_color fair, green, yellow 1 1.1 39.1 1.1 39.1 skin_color gold 1 1.1 40.2 1.1 40.2 skin_color green 6 6.9 47.1 6.9 47.1 skin_color green, grey 1 1.1 48.3 1.1 48.3 skin_color green-tan, brown 1 1.1 49.4 1.1 49.4 skin_color grey 6 6.9 56.3 6.9 56.3 skin_color grey, blue 1 1.1 57.5 1.1 57.5 skin_color grey, green, yellow 1 1.1 58.6 1.1 58.6 skin_color grey, red 1 1.1 59.8 1.1 59.8 skin_color light 11 12.6 72.4 12.6 72.4 skin_color metal 1 1.1 73.6 1.1 73.6 skin_color mottled green 1 1.1 74.7 1.1 74.7 skin_color none 1 1.1 75.9 1.1 75.9 skin_color orange 2 2.3 78.2 2.3 78.2 skin_color pale 5 5.7 83.9 5.7 83.9 skin_color red 1 1.1 85.1 1.1 85.1 skin_color red, blue, white 1 1.1 86.2 1.1 86.2 skin_color silver, red 1 1.1 87.4 1.1 87.4 skin_color tan 2 2.3 89.7 2.3 89.7 skin_color unknown 2 2.3 92.0 2.3 92.0 skin_color white 2 2.3 94.3 2.3 94.3 skin_color white, blue 2 2.3 96.6 2.3 96.6 skin_color white, red 1 1.1 97.7 1.1 97.7 skin_color yellow 2 2.3 100.0 2.3 100.0 skin_color Total 87 100.0           eye_color black 10 11.5 11.5 11.5 11.5 eye_color blue 19 21.8 33.3 21.8 33.3 eye_color blue-gray 1 1.1 34.5 1.1 34.5 eye_color brown 21 24.1 58.6 24.1 58.6 eye_color dark 1 1.1 59.8 1.1 59.8 eye_color gold 1 1.1 60.9 1.1 60.9 eye_color green, yellow 1 1.1 62.1 1.1 62.1 eye_color hazel 3 3.4 65.5 3.4 65.5 eye_color orange 8 9.2 74.7 9.2 74.7 eye_color pink 1 1.1 75.9 1.1 75.9 eye_color red 5 5.7 81.6 5.7 81.6 eye_color red, blue 1 1.1 82.8 1.1 82.8 eye_color unknown 3 3.4 86.2 3.4 86.2 eye_color white 1 1.1 87.4 1.1 87.4 eye_color yellow 11 12.6 100.0 12.6 100.0 eye_color Total 87 100.0    n: 65 height \\ gender masculine feminine NA total character integer integer integer integer 66 1 0 0 1 79 1 0 0 1 88 1 0 0 1 94 1 0 0 1 96 1 1 0 2 97 1 0 0 1 112 1 0 0 1 122 1 0 0 1 137 1 0 0 1 150 0 2 0 2 157 0 1 0 1 160 1 0 0 1 163 1 1 0 2 165 0 3 0 3 166 0 1 0 1 167 1 1 0 2 168 0 1 0 1 170 3 1 0 4 171 1 0 0 1 172 1 0 0 1 173 1 0 0 1 175 3 0 0 3 177 1 0 0 1 178 1 2 1 4 180 5 0 0 5 182 1 0 0 1 183 5 0 2 7 184 0 1 0 1 185 1 0 0 1 188 5 0 0 5 190 1 0 0 1 191 3 0 0 3 193 3 0 0 3 196 3 0 0 3 198 2 0 0 2 200 1 0 0 1 202 1 0 0 1 206 2 0 0 2 213 0 1 0 1 216 1 0 0 1 224 1 0 0 1 228 1 0 0 1 229 1 0 0 1 234 1 0 0 1 264 1 0 0 1 NA 4 1 1 6 total 66 17 4 87 n: 47","code":"# tabulate the 8th column tab(starwars, 8) #> # A tibble: 5 × 6 #>   sex                n percent   cum valid valid_cum #>   <chr>          <int>   <dbl> <dbl> <dbl>     <dbl> #> 1 female            16   18.4   18.4 19.3       19.3 #> 2 hermaphroditic     1    1.15  19.5  1.20      20.5 #> 3 male              60   69.0   88.5 72.3       92.8 #> 4 none               6    6.90  95.4  7.23     100   #> 5 NA                 4    4.60 100   NA         NA    # tabulate the \"sex\" column tab(starwars, sex) #> # A tibble: 5 × 6 #>   sex                n percent   cum valid valid_cum #>   <chr>          <int>   <dbl> <dbl> <dbl>     <dbl> #> 1 female            16   18.4   18.4 19.3       19.3 #> 2 hermaphroditic     1    1.15  19.5  1.20      20.5 #> 3 male              60   69.0   88.5 72.3       92.8 #> 4 none               6    6.90  95.4  7.23     100   #> 5 NA                 4    4.60 100   NA         NA    tab(starwars, sex, .desc = TRUE) #> # A tibble: 5 × 6 #>   sex                n percent   cum valid valid_cum #>   <chr>          <int>   <dbl> <dbl> <dbl>     <dbl> #> 1 male              60   69.0   69.0 72.3       72.3 #> 2 female            16   18.4   87.4 19.3       91.6 #> 3 none               6    6.90  94.3  7.23      98.8 #> 4 hermaphroditic     1    1.15  95.4  1.20     100   #> 5 NA                 4    4.60 100   NA         NA    fre(starwars, sex) .cl-4d60d58c{}.cl-4d58d166{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-4d58d17a{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(153, 153, 153, 1.00);background-color:transparent;}.cl-4d5b44f0{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-4d5b44fa{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-4d5b5968{width:1.457in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b5972{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b5973{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b597c{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b597d{width:1.457in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b5986{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b5987{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b5990{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b5991{width:1.457in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b5992{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b599a{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b599b{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b59a4{width:1.457in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b59ae{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b59af{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b59b8{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b59b9{width:1.457in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b59c2{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b59c3{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b59cc{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b59cd{width:1.457in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b59d6{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b59d7{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b59d8{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b59e0{width:1.457in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b59e1{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b59e2{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d5b59e3{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}sexnpercentcumvalidvalid_cumcharacterintegernumericnumericnumericnumericfemale1618.418.419.319.3hermaphroditic11.119.51.220.5male6069.088.572.392.8none66.995.47.2100.0Valid Total8395.4100.0NA44.6100.0Total87100.0n: 7 fre(starwars, sex, .desc = TRUE) .cl-4d86a406{}.cl-4d80f3f8{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-4d80f40c{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(153, 153, 153, 1.00);background-color:transparent;}.cl-4d833618{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-4d83362c{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-4d834914{width:1.457in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d83491e{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d83491f{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d834928{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d834929{width:1.457in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d834932{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d834933{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d834934{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d834935{width:1.457in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d83493c{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d83493d{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d834946{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d834947{width:1.457in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d834948{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d834949{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d834950{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d834951{width:1.457in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d834952{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d83495a{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d83495b{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d834964{width:1.457in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d834965{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d834966{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d83496e{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d83496f{width:1.457in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d834970{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d834978{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4d834979{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}sexnpercentcumvalidvalid_cumcharacterintegernumericnumericnumericnumericmale6069.069.072.372.3female1618.487.419.391.6none66.994.37.298.8hermaphroditic11.195.41.2100.0Valid Total8395.4100.0NA44.6100.0Total87100.0n: 7 tab(starwars, sex, gender) #> # A tibble: 6 × 7 #>   sex            gender        n percent   cum valid valid_cum #>   <chr>          <chr>     <int>   <dbl> <dbl> <dbl>     <dbl> #> 1 female         feminine     16   18.4   18.4 19.3       19.3 #> 2 hermaphroditic masculine     1    1.15  19.5  1.20      20.5 #> 3 male           masculine    60   69.0   88.5 72.3       92.8 #> 4 none           feminine      1    1.15  89.7  1.20      94.0 #> 5 none           masculine     5    5.75  95.4  6.02     100   #> 6 NA             NA            4    4.60 100   NA         NA    tab(starwars, sex == \"male\") #> # A tibble: 3 × 6 #>   `sex == \"male\"`     n percent   cum valid valid_cum #>   <lgl>           <int>   <dbl> <dbl> <dbl>     <dbl> #> 1 FALSE              23   26.4   26.4  27.7      27.7 #> 2 TRUE               60   69.0   95.4  72.3     100   #> 3 NA                  4    4.60 100    NA        NA    tab(starwars, male = sex == \"male\") #> # A tibble: 3 × 6 #>   male      n percent   cum valid valid_cum #>   <lgl> <int>   <dbl> <dbl> <dbl>     <dbl> #> 1 FALSE    23   26.4   26.4  27.7      27.7 #> 2 TRUE     60   69.0   95.4  72.3     100   #> 3 NA        4    4.60 100    NA        NA    tab(starwars, ends_with(\"color\")) #> # A tibble: 67 × 8 #>    hair_color    skin_color eye_color     n percent   cum valid valid_cum #>    <chr>         <chr>      <chr>     <int>   <dbl> <dbl> <dbl>     <dbl> #>  1 auburn        fair       blue          1    1.15  1.15  1.22      1.22 #>  2 auburn, grey  fair       blue          1    1.15  2.30  1.22      2.44 #>  3 auburn, white fair       blue-gray     1    1.15  3.45  1.22      3.66 #>  4 black         blue, grey yellow        1    1.15  4.60  1.22      4.88 #>  5 black         brown      brown         1    1.15  5.75  1.22      6.10 #>  6 black         dark       brown         3    3.45  9.20  3.66      9.76 #>  7 black         dark       dark          1    1.15 10.3   1.22     11.0  #>  8 black         fair       brown         2    2.30 12.6   2.44     13.4  #>  9 black         light      brown         1    1.15 13.8   1.22     14.6  #> 10 black         tan        brown         2    2.30 16.1   2.44     17.1  #> # ℹ 57 more rows  tab(starwars, s_match(\"s*e\")) #> # A tibble: 1 × 5 #>       n percent   cum valid valid_cum #>   <int>   <dbl> <dbl> <dbl>     <dbl> #> 1    87     100   100   100       100  tab(starwars) #> # A tibble: 87 × 19 #>    name     height  mass hair_color skin_color eye_color birth_year sex   gender #>    <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr>  #>  1 Ackbar      180  83   none       brown mot… orange          41   male  mascu… #>  2 Anakin …    188  84   blond      fair       blue            41.9 male  mascu… #>  3 Ayla Se…    178  55   none       blue       hazel           48   fema… femin… #>  4 Barriss…    166  50   black      yellow     blue            40   fema… femin… #>  5 Beru Wh…    165  75   brown      light      blue            47   fema… femin… #>  6 Biggs D…    183  84   black      light      brown           24   male  mascu… #>  7 Boba Fe…    183  78.2 black      fair       brown           31.5 male  mascu… #>  8 Bossk       190 113   none       green      red             53   male  mascu… #>  9 Chewbac…    228 112   brown      unknown    blue           200   male  mascu… #> 10 Darth M…    175  80   none       red        yellow          54   male  mascu… #> # ℹ 77 more rows #> # ℹ 10 more variables: homeworld <chr>, species <chr>, films <list>, #> #   vehicles <list>, starships <list>, n <int>, percent <dbl>, cum <dbl>, #> #   valid <dbl>, valid_cum <dbl>  tab1(starwars, 1:3) #> $name #> # A tibble: 87 × 6 #>    value                   n percent   cum valid valid_cum #>    <chr>               <int>   <dbl> <dbl> <dbl>     <dbl> #>  1 Ackbar                  1    1.15  1.15  1.15      1.15 #>  2 Adi Gallia              1    1.15  2.30  1.15      2.30 #>  3 Anakin Skywalker        1    1.15  3.45  1.15      3.45 #>  4 Arvel Crynyd            1    1.15  4.60  1.15      4.60 #>  5 Ayla Secura             1    1.15  5.75  1.15      5.75 #>  6 BB8                     1    1.15  6.90  1.15      6.90 #>  7 Bail Prestor Organa     1    1.15  8.05  1.15      8.05 #>  8 Barriss Offee           1    1.15  9.20  1.15      9.20 #>  9 Ben Quadinaros          1    1.15 10.3   1.15     10.3  #> 10 Beru Whitesun lars      1    1.15 11.5   1.15     11.5  #> # ℹ 77 more rows #>  #> $height #> # A tibble: 46 × 6 #>    value     n percent   cum valid valid_cum #>    <int> <int>   <dbl> <dbl> <dbl>     <dbl> #>  1    66     1    1.15  1.15  1.23      1.23 #>  2    79     1    1.15  2.30  1.23      2.47 #>  3    88     1    1.15  3.45  1.23      3.70 #>  4    94     1    1.15  4.60  1.23      4.94 #>  5    96     2    2.30  6.90  2.47      7.41 #>  6    97     1    1.15  8.05  1.23      8.64 #>  7   112     1    1.15  9.20  1.23      9.88 #>  8   122     1    1.15 10.3   1.23     11.1  #>  9   137     1    1.15 11.5   1.23     12.3  #> 10   150     2    2.30 13.8   2.47     14.8  #> # ℹ 36 more rows #>  #> $mass #> # A tibble: 39 × 6 #>    value     n percent   cum valid valid_cum #>    <dbl> <int>   <dbl> <dbl> <dbl>     <dbl> #>  1    15     1    1.15  1.15  1.69      1.69 #>  2    17     1    1.15  2.30  1.69      3.39 #>  3    20     1    1.15  3.45  1.69      5.08 #>  4    32     2    2.30  5.75  3.39      8.47 #>  5    40     1    1.15  6.90  1.69     10.2  #>  6    45     2    2.30  9.20  3.39     13.6  #>  7    48     2    2.30 11.5   3.39     16.9  #>  8    49     1    1.15 12.6   1.69     18.6  #>  9    50     2    2.30 14.9   3.39     22.0  #> 10    55     2    2.30 17.2   3.39     25.4  #> # ℹ 29 more rows #>   tab1(starwars, ends_with(\"color\")) #> $hair_color #> # A tibble: 13 × 6 #>    value             n percent    cum valid valid_cum #>    <chr>         <int>   <dbl>  <dbl> <dbl>     <dbl> #>  1 auburn            1    1.15   1.15  1.22      1.22 #>  2 auburn, grey      1    1.15   2.30  1.22      2.44 #>  3 auburn, white     1    1.15   3.45  1.22      3.66 #>  4 black            13   14.9   18.4  15.9      19.5  #>  5 blond             3    3.45  21.8   3.66     23.2  #>  6 blonde            1    1.15  23.0   1.22     24.4  #>  7 brown            18   20.7   43.7  22.0      46.3  #>  8 brown, grey       1    1.15  44.8   1.22     47.6  #>  9 grey              1    1.15  46.0   1.22     48.8  #> 10 none             37   42.5   88.5  45.1      93.9  #> 11 unknown           1    1.15  89.7   1.22     95.1  #> 12 white             4    4.60  94.3   4.88    100    #> 13 NA                5    5.75 100    NA        NA    #>  #> $skin_color #> # A tibble: 31 × 6 #>    value                   n percent   cum valid valid_cum #>    <chr>               <int>   <dbl> <dbl> <dbl>     <dbl> #>  1 blue                    2    2.30  2.30  2.30      2.30 #>  2 blue, grey              2    2.30  4.60  2.30      4.60 #>  3 brown                   4    4.60  9.20  4.60      9.20 #>  4 brown mottle            1    1.15 10.3   1.15     10.3  #>  5 brown, white            1    1.15 11.5   1.15     11.5  #>  6 dark                    6    6.90 18.4   6.90     18.4  #>  7 fair                   17   19.5  37.9  19.5      37.9  #>  8 fair, green, yellow     1    1.15 39.1   1.15     39.1  #>  9 gold                    1    1.15 40.2   1.15     40.2  #> 10 green                   6    6.90 47.1   6.90     47.1  #> # ℹ 21 more rows #>  #> $eye_color #> # A tibble: 15 × 6 #>    value             n percent   cum valid valid_cum #>    <chr>         <int>   <dbl> <dbl> <dbl>     <dbl> #>  1 black            10   11.5   11.5 11.5       11.5 #>  2 blue             19   21.8   33.3 21.8       33.3 #>  3 blue-gray         1    1.15  34.5  1.15      34.5 #>  4 brown            21   24.1   58.6 24.1       58.6 #>  5 dark              1    1.15  59.8  1.15      59.8 #>  6 gold              1    1.15  60.9  1.15      60.9 #>  7 green, yellow     1    1.15  62.1  1.15      62.1 #>  8 hazel             3    3.45  65.5  3.45      65.5 #>  9 orange            8    9.20  74.7  9.20      74.7 #> 10 pink              1    1.15  75.9  1.15      75.9 #> 11 red               5    5.75  81.6  5.75      81.6 #> 12 red, blue         1    1.15  82.8  1.15      82.8 #> 13 unknown           3    3.45  86.2  3.45      86.2 #> 14 white             1    1.15  87.4  1.15      87.4 #> 15 yellow           11   12.6  100   12.6      100   #>   tab1(starwars, ends_with(\"color\"), .type = \"tibble\") #> # A tibble: 59 × 7 #>    variable   value             n percent   cum valid valid_cum #>    <chr>      <chr>         <int>   <dbl> <dbl> <dbl>     <dbl> #>  1 hair_color auburn            1    1.15  1.15  1.22      1.22 #>  2 hair_color auburn, grey      1    1.15  2.30  1.22      2.44 #>  3 hair_color auburn, white     1    1.15  3.45  1.22      3.66 #>  4 hair_color black            13   14.9  18.4  15.9      19.5  #>  5 hair_color blond             3    3.45 21.8   3.66     23.2  #>  6 hair_color blonde            1    1.15 23.0   1.22     24.4  #>  7 hair_color brown            18   20.7  43.7  22.0      46.3  #>  8 hair_color brown, grey       1    1.15 44.8   1.22     47.6  #>  9 hair_color grey              1    1.15 46.0   1.22     48.8  #> 10 hair_color none             37   42.5  88.5  45.1      93.9  #> # ℹ 49 more rows  fre1(starwars, ends_with(\"color\")) .cl-4e50c8a8{}.cl-4e4603c8{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-4e4603dc{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(153, 153, 153, 1.00);background-color:transparent;}.cl-4e4917e8{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-4e4917f2{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-4e4932dc{width:1.045in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e4932e6{width:1.756in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e4932e7{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e4932f0{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e4932fa{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e4932fb{width:1.045in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e493304{width:1.756in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e493305{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e49330e{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e49330f{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e493310{width:1.045in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e493318{width:1.756in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e493319{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e49331a{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e493322{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e493323{width:1.045in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e49332c{width:1.756in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e493336{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e493340{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e493341{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e49334a{width:1.045in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e493354{width:1.756in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e493355{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e493356{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e49335e{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e49335f{width:1.045in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e493368{width:1.756in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e493369{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e493372{width:0.911in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4e493373{width:1.057in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}variablevaluenpercentcumvalidvalid_cumcharactercharacterintegernumericnumericnumericnumerichair_colorauburn11.11.11.21.2hair_colorauburn, grey11.12.31.22.4hair_colorauburn, white11.13.41.23.7hair_colorblack1314.918.415.919.5hair_colorblond33.421.83.723.2hair_colorblonde11.123.01.224.4hair_colorbrown1820.743.722.046.3hair_colorbrown, grey11.144.81.247.6hair_colorgrey11.146.01.248.8hair_colornone3742.588.545.193.9hair_colorunknown11.189.71.295.1hair_colorwhite44.694.34.9100.0hair_colorValid Total8294.3100.0hair_colorNA55.7100.0hair_colorTotal87100.0skin_colorblue22.32.32.32.3skin_colorblue, grey22.34.62.34.6skin_colorbrown44.69.24.69.2skin_colorbrown mottle11.110.31.110.3skin_colorbrown, white11.111.51.111.5skin_colordark66.918.46.918.4skin_colorfair1719.537.919.537.9skin_colorfair, green, yellow11.139.11.139.1skin_colorgold11.140.21.140.2skin_colorgreen66.947.16.947.1skin_colorgreen, grey11.148.31.148.3skin_colorgreen-tan, brown11.149.41.149.4skin_colorgrey66.956.36.956.3skin_colorgrey, blue11.157.51.157.5skin_colorgrey, green, yellow11.158.61.158.6skin_colorgrey, red11.159.81.159.8skin_colorlight1112.672.412.672.4skin_colormetal11.173.61.173.6skin_colormottled green11.174.71.174.7skin_colornone11.175.91.175.9skin_colororange22.378.22.378.2skin_colorpale55.783.95.783.9skin_colorred11.185.11.185.1skin_colorred, blue, white11.186.21.186.2skin_colorsilver, red11.187.41.187.4skin_colortan22.389.72.389.7skin_colorunknown22.392.02.392.0skin_colorwhite22.394.32.394.3skin_colorwhite, blue22.396.62.396.6skin_colorwhite, red11.197.71.197.7skin_coloryellow22.3100.02.3100.0skin_colorTotal87100.0eye_colorblack1011.511.511.511.5eye_colorblue1921.833.321.833.3eye_colorblue-gray11.134.51.134.5eye_colorbrown2124.158.624.158.6eye_colordark11.159.81.159.8eye_colorgold11.160.91.160.9eye_colorgreen, yellow11.162.11.162.1eye_colorhazel33.465.53.465.5eye_colororange89.274.79.274.7eye_colorpink11.175.91.175.9eye_colorred55.781.65.781.6eye_colorred, blue11.182.81.182.8eye_colorunknown33.486.23.486.2eye_colorwhite11.187.41.187.4eye_coloryellow1112.6100.012.6100.0eye_colorTotal87100.0n: 65 fre1(starwars, ends_with(\"color\"), .type = \"list\") #> $hair_color #> # A tibble: 15 × 6 #>    value             n percent    cum  valid valid_cum #>    <chr>         <int>   <dbl>  <dbl>  <dbl>     <dbl> #>  1 auburn            1    1.15   1.15   1.22      1.22 #>  2 auburn, grey      1    1.15   2.30   1.22      2.44 #>  3 auburn, white     1    1.15   3.45   1.22      3.66 #>  4 black            13   14.9   18.4   15.9      19.5  #>  5 blond             3    3.45  21.8    3.66     23.2  #>  6 blonde            1    1.15  23.0    1.22     24.4  #>  7 brown            18   20.7   43.7   22.0      46.3  #>  8 brown, grey       1    1.15  44.8    1.22     47.6  #>  9 grey              1    1.15  46.0    1.22     48.8  #> 10 none             37   42.5   88.5   45.1      93.9  #> 11 unknown           1    1.15  89.7    1.22     95.1  #> 12 white             4    4.60  94.3    4.88    100    #> 13 Valid Total      82   94.3   NA    100        NA    #> 14 NA                5    5.75 100     NA        NA    #> 15 Total            87  100     NA     NA        NA    #>  #> $skin_color #> # A tibble: 32 × 6 #>    value                   n percent   cum valid valid_cum #>    <chr>               <int>   <dbl> <dbl> <dbl>     <dbl> #>  1 blue                    2    2.30  2.30  2.30      2.30 #>  2 blue, grey              2    2.30  4.60  2.30      4.60 #>  3 brown                   4    4.60  9.20  4.60      9.20 #>  4 brown mottle            1    1.15 10.3   1.15     10.3  #>  5 brown, white            1    1.15 11.5   1.15     11.5  #>  6 dark                    6    6.90 18.4   6.90     18.4  #>  7 fair                   17   19.5  37.9  19.5      37.9  #>  8 fair, green, yellow     1    1.15 39.1   1.15     39.1  #>  9 gold                    1    1.15 40.2   1.15     40.2  #> 10 green                   6    6.90 47.1   6.90     47.1  #> # ℹ 22 more rows #>  #> $eye_color #> # A tibble: 16 × 6 #>    value             n percent   cum valid valid_cum #>    <chr>         <int>   <dbl> <dbl> <dbl>     <dbl> #>  1 black            10   11.5   11.5 11.5       11.5 #>  2 blue             19   21.8   33.3 21.8       33.3 #>  3 blue-gray         1    1.15  34.5  1.15      34.5 #>  4 brown            21   24.1   58.6 24.1       58.6 #>  5 dark              1    1.15  59.8  1.15      59.8 #>  6 gold              1    1.15  60.9  1.15      60.9 #>  7 green, yellow     1    1.15  62.1  1.15      62.1 #>  8 hazel             3    3.45  65.5  3.45      65.5 #>  9 orange            8    9.20  74.7  9.20      74.7 #> 10 pink              1    1.15  75.9  1.15      75.9 #> 11 red               5    5.75  81.6  5.75      81.6 #> 12 red, blue         1    1.15  82.8  1.15      82.8 #> 13 unknown           3    3.45  86.2  3.45      86.2 #> 14 white             1    1.15  87.4  1.15      87.4 #> 15 yellow           11   12.6  100   12.6      100   #> 16 Total            87  100     NA   NA         NA   #>   tab2(starwars, sex, gender) #> # A tibble: 5 × 4 #>   `sex \\\\ gender` feminine masculine  `NA` #>   <chr>              <int>     <int> <int> #> 1 female                16         0     0 #> 2 hermaphroditic         0         1     0 #> 3 male                   0        60     0 #> 4 none                   1         5     0 #> 5 NA                     0         0     4  tab2(starwars, height, gender) #> # A tibble: 46 × 4 #>    `height \\\\ gender` masculine feminine  `NA` #>                 <int>     <int>    <int> <int> #>  1                 66         1        0     0 #>  2                 79         1        0     0 #>  3                 88         1        0     0 #>  4                 94         1        0     0 #>  5                 96         1        1     0 #>  6                 97         1        0     0 #>  7                112         1        0     0 #>  8                122         1        0     0 #>  9                137         1        0     0 #> 10                150         0        2     0 #> # ℹ 36 more rows  fre2(starwars, height, gender) .cl-4ea8a906{}.cl-4e9f7318{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-4e9f7322{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(153, 153, 153, 1.00);background-color:transparent;}.cl-4ea21ac8{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-4ea21adc{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-4ea22e00{width:1.462in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4ea22e0a{width:1.064in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4ea22e14{width:0.954in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4ea22e15{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4ea22e1e{width:1.462in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4ea22e1f{width:1.064in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4ea22e20{width:0.954in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4ea22e28{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4ea22e29{width:1.462in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4ea22e2a{width:1.064in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4ea22e32{width:0.954in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4ea22e3c{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4ea22e3d{width:1.462in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4ea22e3e{width:1.064in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4ea22e46{width:0.954in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4ea22e50{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4ea22e51{width:1.462in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4ea22e5a{width:1.064in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4ea22e5b{width:0.954in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4ea22e64{width:0.832in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}height \\ gendermasculinefeminineNAtotalcharacterintegerintegerintegerinteger661001791001881001941001961102971001112100112210011371001150020215701011601001163110216503031660101167110216801011703104171100117210011731001175300317710011781214180500518210011835027184010118510011885005190100119130031933003196300319820022001001202100120620022130101216100122410012281001229100123410012641001NA4116total6617487n: 47"},{"path":"/reference/tidy_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Directly obtain the regression results — tidy_coef","title":"Directly obtain the regression results — tidy_coef","text":"Given model fit object (e.g. lm() glm()), tidy_coef() returns tibble coefficients.","code":""},{"path":"/reference/tidy_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Directly obtain the regression results — tidy_coef","text":"","code":"tidy_coef(model, digit = integer(0), format = \"%.3f\")"},{"path":"/reference/tidy_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Directly obtain the regression results — tidy_coef","text":"model character string specifying model used. digit positive integer specifying number digits displayed. format character string specifying format coefficients. default %.3f, means three decimal places.","code":""},{"path":"/reference/tidy_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Directly obtain the regression results — tidy_coef","text":"Return regression results list tibble.","code":""},{"path":[]},{"path":"/reference/tidy_coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Directly obtain the regression results — tidy_coef","text":"","code":"lm(mpg ~ wt + hp, data = mtcars) %>%   tidy_coef() #> # A tibble: 3 × 7 #>   term        coef                 estimate std.error statistic  p.value star  #>   <chr>       <chr>                   <dbl>     <dbl>     <dbl>    <dbl> <chr> #> 1 (Intercept) \"37.227***\\n(1.599)\"  37.2      1.60        23.3  2.57e-20 ***   #> 2 wt          \"-3.878***\\n(0.633)\"  -3.88     0.633       -6.13 1.12e- 6 ***   #> 3 hp          \"-0.032**\\n(0.009)\"   -0.0318   0.00903     -3.52 1.45e- 3 **"},{"path":"/reference/type_conversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Better type conversion — type_conversion","title":"Better type conversion — type_conversion","text":"improves performance converting several types variables.","code":""},{"path":"/reference/type_conversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Better type conversion — type_conversion","text":"","code":"as_character(.x)  as_numeric(.x)"},{"path":"/reference/type_conversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Better type conversion — type_conversion","text":".x vector matrix.","code":""},{"path":"/reference/type_conversion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Better type conversion — type_conversion","text":"","code":"lifeexp %>%   dplyr::mutate(     region_chr = as_character(region),     region_num = as_numeric(region),     region_fct = haven::as_factor(region),     .keep = \"used\"   ) #> # A tibble: 68 × 4 #>    region               region_chr       region_num region_fct       #>    <dbl+lbl>            <chr>                 <dbl> <fct>            #>  1 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #>  2 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #>  3 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #>  4 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #>  5 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #>  6 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #>  7 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #>  8 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #>  9 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #> 10 1 [Europe & C. Asia] Europe & C. Asia          1 Europe & C. Asia #> # ℹ 58 more rows"},{"path":"/reference/variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the variable list of a dataset — variables","title":"Show the variable list of a dataset — variables","text":"variables() works like \"Variables\" tab Stata. variables_search() searches variables name label.","code":""},{"path":"/reference/variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the variable list of a dataset — variables","text":"","code":"variables(.data, ...)  variables_search(.data, string, ...)"},{"path":"/reference/variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the variable list of a dataset — variables","text":".data input data (data frame tibble). ... <tidy-select> <data-masking> Variables include codebook. argument can omitted. string string search variable names labels.","code":""},{"path":"/reference/variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the variable list of a dataset — variables","text":"tibble.","code":""},{"path":[]},{"path":"/reference/variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the variable list of a dataset — variables","text":"","code":"variables(lifeexp) #> # A tibble: 6 × 2 #>   name      label                    #>   <chr>     <chr>                    #> 1 region    Region                   #> 2 country   Country                  #> 3 popgrowth Avg. annual % growth     #> 4 lexp      Life expectancy at birth #> 5 gnppc     GNP per capita           #> 6 safewater Safe water                variables_search(lifeexp, \"n\") #> # A tibble: 3 × 2 #>   name    label          #>   <chr>   <chr>          #> 1 region  Region         #> 2 country Country        #> 3 gnppc   GNP per capita"}]
